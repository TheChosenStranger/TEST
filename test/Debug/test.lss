
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  000030c2  00003156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800204  00800204  000032fa  2**0
                  ALLOC
  3 .stab         0000252c  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b72  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000639a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000653a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000672c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b094  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b254  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000beb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <main>
      8a:	0c 94 5f 18 	jmp	0x30be	; 0x30be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ec       	ldi	r26, 0xCB	; 203
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ec       	ldi	r24, 0xCB	; 203
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 18 	jmp	0x3088	; 0x3088 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ec       	ldi	r22, 0xCB	; 203
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 52       	subi	r30, 0x2D	; 45
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <CLCD_voidInitialize>:

#define F_CPU 800000UL
#include <util/delay.h>

void CLCD_voidInitialize(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	6c 97       	sbiw	r28, 0x1c	; 28
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a0 e2       	ldi	r26, 0x20	; 32
     e48:	b2 e4       	ldi	r27, 0x42	; 66
     e4a:	89 8f       	std	Y+25, r24	; 0x19
     e4c:	9a 8f       	std	Y+26, r25	; 0x1a
     e4e:	ab 8f       	std	Y+27, r26	; 0x1b
     e50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e52:	69 8d       	ldd	r22, Y+25	; 0x19
     e54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	48 e4       	ldi	r20, 0x48	; 72
     e60:	53 e4       	ldi	r21, 0x43	; 67
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	8d 8b       	std	Y+21, r24	; 0x15
     e6c:	9e 8b       	std	Y+22, r25	; 0x16
     e6e:	af 8b       	std	Y+23, r26	; 0x17
     e70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e72:	6d 89       	ldd	r22, Y+21	; 0x15
     e74:	7e 89       	ldd	r23, Y+22	; 0x16
     e76:	8f 89       	ldd	r24, Y+23	; 0x17
     e78:	98 8d       	ldd	r25, Y+24	; 0x18
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e86:	88 23       	and	r24, r24
     e88:	2c f4       	brge	.+10     	; 0xe94 <CLCD_voidInitialize+0x66>
		__ticks = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
     e90:	8b 8b       	std	Y+19, r24	; 0x13
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <CLCD_voidInitialize+0xe4>
	else if (__tmp > 65535)
     e94:	6d 89       	ldd	r22, Y+21	; 0x15
     e96:	7e 89       	ldd	r23, Y+22	; 0x16
     e98:	8f 89       	ldd	r24, Y+23	; 0x17
     e9a:	98 8d       	ldd	r25, Y+24	; 0x18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	57 e4       	ldi	r21, 0x47	; 71
     ea4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	4c f5       	brge	.+82     	; 0xefe <CLCD_voidInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eac:	69 8d       	ldd	r22, Y+25	; 0x19
     eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e2       	ldi	r20, 0x20	; 32
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9c 8b       	std	Y+20, r25	; 0x14
     ed2:	8b 8b       	std	Y+19, r24	; 0x13
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <CLCD_voidInitialize+0xc6>
     ed6:	84 e1       	ldi	r24, 0x14	; 20
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9a 8b       	std	Y+18, r25	; 0x12
     edc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ede:	89 89       	ldd	r24, Y+17	; 0x11
     ee0:	9a 89       	ldd	r25, Y+18	; 0x12
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <CLCD_voidInitialize+0xb4>
     ee6:	9a 8b       	std	Y+18, r25	; 0x12
     ee8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eea:	8b 89       	ldd	r24, Y+19	; 0x13
     eec:	9c 89       	ldd	r25, Y+20	; 0x14
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9c 8b       	std	Y+20, r25	; 0x14
     ef2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef4:	8b 89       	ldd	r24, Y+19	; 0x13
     ef6:	9c 89       	ldd	r25, Y+20	; 0x14
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	69 f7       	brne	.-38     	; 0xed6 <CLCD_voidInitialize+0xa8>
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <CLCD_voidInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	6d 89       	ldd	r22, Y+21	; 0x15
     f00:	7e 89       	ldd	r23, Y+22	; 0x16
     f02:	8f 89       	ldd	r24, Y+23	; 0x17
     f04:	98 8d       	ldd	r25, Y+24	; 0x18
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	98 8b       	std	Y+16, r25	; 0x10
     f18:	8f 87       	std	Y+15, r24	; 0x0f
     f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1c:	98 89       	ldd	r25, Y+16	; 0x10
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <CLCD_voidInitialize+0xf0>
     f22:	98 8b       	std	Y+16, r25	; 0x10
     f24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	CLCD_voidWriteCmd(0b00111100);
     f26:	8c e3       	ldi	r24, 0x3C	; 60
     f28:	0e 94 a6 09 	call	0x134c	; 0x134c <CLCD_voidWriteCmd>
	CLCD_voidWriteCmd(0b00001100);
     f2c:	8c e0       	ldi	r24, 0x0C	; 12
     f2e:	0e 94 a6 09 	call	0x134c	; 0x134c <CLCD_voidWriteCmd>
	CLCD_voidWriteCmd(0b00000001);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 a6 09 	call	0x134c	; 0x134c <CLCD_voidWriteCmd>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e4       	ldi	r27, 0x40	; 64
     f40:	8b 87       	std	Y+11, r24	; 0x0b
     f42:	9c 87       	std	Y+12, r25	; 0x0c
     f44:	ad 87       	std	Y+13, r26	; 0x0d
     f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f48:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	48 e4       	ldi	r20, 0x48	; 72
     f56:	53 e4       	ldi	r21, 0x43	; 67
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8f 83       	std	Y+7, r24	; 0x07
     f62:	98 87       	std	Y+8, r25	; 0x08
     f64:	a9 87       	std	Y+9, r26	; 0x09
     f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	2c f4       	brge	.+10     	; 0xf8a <CLCD_voidInitialize+0x15c>
		__ticks = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <CLCD_voidInitialize+0x1da>
	else if (__tmp > 65535)
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	4c f5       	brge	.+82     	; 0xff4 <CLCD_voidInitialize+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	0f c0       	rjmp	.+30     	; 0xfea <CLCD_voidInitialize+0x1bc>
     fcc:	84 e1       	ldi	r24, 0x14	; 20
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <CLCD_voidInitialize+0x1aa>
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <CLCD_voidInitialize+0x19e>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <CLCD_voidInitialize+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	6f 81       	ldd	r22, Y+7	; 0x07
     ff6:	78 85       	ldd	r23, Y+8	; 0x08
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <CLCD_voidInitialize+0x1e6>
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    101c:	6c 96       	adiw	r28, 0x1c	; 28
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <CLCD_voidWriteData>:

void CLCD_voidWriteData(u8 Copy_u8Data)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	6d 97       	sbiw	r28, 0x1d	; 29
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	8d 8f       	std	Y+29, r24	; 0x1d
	/*RS = 1*/
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,1);
    1044:	84 e4       	ldi	r24, 0x44	; 68
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*RW = 0*/
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
    1054:	84 e4       	ldi	r24, 0x44	; 68
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*DATA */
	SetPinValue(CLCD_u8_D0_PORT,CLCD_u8_D0_PIN,GET_BIT(Copy_u8Data,0));
    1064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 01       	movw	r18, r24
    106c:	21 70       	andi	r18, 0x01	; 1
    106e:	30 70       	andi	r19, 0x00	; 0
    1070:	83 e4       	ldi	r24, 0x43	; 67
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	a9 01       	movw	r20, r18
    107a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D1_PORT,CLCD_u8_D1_PIN,GET_BIT(Copy_u8Data,1));
    107e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1080:	86 95       	lsr	r24
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9c 01       	movw	r18, r24
    1088:	21 70       	andi	r18, 0x01	; 1
    108a:	30 70       	andi	r19, 0x00	; 0
    108c:	83 e4       	ldi	r24, 0x43	; 67
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D2_PORT,CLCD_u8_D2_PIN,GET_BIT(Copy_u8Data,2));
    109a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    109c:	86 95       	lsr	r24
    109e:	86 95       	lsr	r24
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9c 01       	movw	r18, r24
    10a6:	21 70       	andi	r18, 0x01	; 1
    10a8:	30 70       	andi	r19, 0x00	; 0
    10aa:	83 e4       	ldi	r24, 0x43	; 67
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	62 e0       	ldi	r22, 0x02	; 2
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D3_PORT,CLCD_u8_D3_PIN,GET_BIT(Copy_u8Data,3));
    10b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ba:	86 95       	lsr	r24
    10bc:	86 95       	lsr	r24
    10be:	86 95       	lsr	r24
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9c 01       	movw	r18, r24
    10c6:	21 70       	andi	r18, 0x01	; 1
    10c8:	30 70       	andi	r19, 0x00	; 0
    10ca:	83 e4       	ldi	r24, 0x43	; 67
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	63 e0       	ldi	r22, 0x03	; 3
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	a9 01       	movw	r20, r18
    10d4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D4_PORT,CLCD_u8_D4_PIN,GET_BIT(Copy_u8Data,4));
    10d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10da:	82 95       	swap	r24
    10dc:	8f 70       	andi	r24, 0x0F	; 15
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 01       	movw	r18, r24
    10e4:	21 70       	andi	r18, 0x01	; 1
    10e6:	30 70       	andi	r19, 0x00	; 0
    10e8:	83 e4       	ldi	r24, 0x43	; 67
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	64 e0       	ldi	r22, 0x04	; 4
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D5_PORT,CLCD_u8_D5_PIN,GET_BIT(Copy_u8Data,5));
    10f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f8:	82 95       	swap	r24
    10fa:	86 95       	lsr	r24
    10fc:	87 70       	andi	r24, 0x07	; 7
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	21 70       	andi	r18, 0x01	; 1
    1106:	30 70       	andi	r19, 0x00	; 0
    1108:	83 e4       	ldi	r24, 0x43	; 67
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	65 e0       	ldi	r22, 0x05	; 5
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D6_PORT,CLCD_u8_D6_PIN,GET_BIT(Copy_u8Data,6));
    1116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1118:	82 95       	swap	r24
    111a:	86 95       	lsr	r24
    111c:	86 95       	lsr	r24
    111e:	83 70       	andi	r24, 0x03	; 3
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	9c 01       	movw	r18, r24
    1126:	21 70       	andi	r18, 0x01	; 1
    1128:	30 70       	andi	r19, 0x00	; 0
    112a:	83 e4       	ldi	r24, 0x43	; 67
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	66 e0       	ldi	r22, 0x06	; 6
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D7_PORT,CLCD_u8_D7_PIN,GET_BIT(Copy_u8Data,7));
    1138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    113a:	88 1f       	adc	r24, r24
    113c:	88 27       	eor	r24, r24
    113e:	88 1f       	adc	r24, r24
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	83 e4       	ldi	r24, 0x43	; 67
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	67 e0       	ldi	r22, 0x07	; 7
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*E pulse*/
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1152:	84 e4       	ldi	r24, 0x44	; 68
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	62 e0       	ldi	r22, 0x02	; 2
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e0       	ldi	r26, 0x00	; 0
    1168:	b0 e4       	ldi	r27, 0x40	; 64
    116a:	89 8f       	std	Y+25, r24	; 0x19
    116c:	9a 8f       	std	Y+26, r25	; 0x1a
    116e:	ab 8f       	std	Y+27, r26	; 0x1b
    1170:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	69 8d       	ldd	r22, Y+25	; 0x19
    1174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	48 e4       	ldi	r20, 0x48	; 72
    1180:	53 e4       	ldi	r21, 0x43	; 67
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8d 8b       	std	Y+21, r24	; 0x15
    118c:	9e 8b       	std	Y+22, r25	; 0x16
    118e:	af 8b       	std	Y+23, r26	; 0x17
    1190:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <CLCD_voidWriteData+0x186>
		__ticks = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9c 8b       	std	Y+20, r25	; 0x14
    11b0:	8b 8b       	std	Y+19, r24	; 0x13
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <CLCD_voidWriteData+0x204>
	else if (__tmp > 65535)
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	4c f5       	brge	.+82     	; 0x121e <CLCD_voidWriteData+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	69 8d       	ldd	r22, Y+25	; 0x19
    11ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	51 e4       	ldi	r21, 0x41	; 65
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9c 8b       	std	Y+20, r25	; 0x14
    11f2:	8b 8b       	std	Y+19, r24	; 0x13
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <CLCD_voidWriteData+0x1e6>
    11f6:	84 e1       	ldi	r24, 0x14	; 20
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9a 8b       	std	Y+18, r25	; 0x12
    11fc:	89 8b       	std	Y+17, r24	; 0x11
    11fe:	89 89       	ldd	r24, Y+17	; 0x11
    1200:	9a 89       	ldd	r25, Y+18	; 0x12
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <CLCD_voidWriteData+0x1d4>
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8b 89       	ldd	r24, Y+19	; 0x13
    120c:	9c 89       	ldd	r25, Y+20	; 0x14
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8b 89       	ldd	r24, Y+19	; 0x13
    1216:	9c 89       	ldd	r25, Y+20	; 0x14
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f7       	brne	.-38     	; 0x11f6 <CLCD_voidWriteData+0x1c8>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <CLCD_voidWriteData+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	6d 89       	ldd	r22, Y+21	; 0x15
    1220:	7e 89       	ldd	r23, Y+22	; 0x16
    1222:	8f 89       	ldd	r24, Y+23	; 0x17
    1224:	98 8d       	ldd	r25, Y+24	; 0x18
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9c 8b       	std	Y+20, r25	; 0x14
    1230:	8b 8b       	std	Y+19, r24	; 0x13
    1232:	8b 89       	ldd	r24, Y+19	; 0x13
    1234:	9c 89       	ldd	r25, Y+20	; 0x14
    1236:	98 8b       	std	Y+16, r25	; 0x10
    1238:	8f 87       	std	Y+15, r24	; 0x0f
    123a:	8f 85       	ldd	r24, Y+15	; 0x0f
    123c:	98 89       	ldd	r25, Y+16	; 0x10
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <CLCD_voidWriteData+0x210>
    1242:	98 8b       	std	Y+16, r25	; 0x10
    1244:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1246:	84 e4       	ldi	r24, 0x44	; 68
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b0 e4       	ldi	r27, 0x40	; 64
    125e:	8b 87       	std	Y+11, r24	; 0x0b
    1260:	9c 87       	std	Y+12, r25	; 0x0c
    1262:	ad 87       	std	Y+13, r26	; 0x0d
    1264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	48 e4       	ldi	r20, 0x48	; 72
    1274:	53 e4       	ldi	r21, 0x43	; 67
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8f 83       	std	Y+7, r24	; 0x07
    1280:	98 87       	std	Y+8, r25	; 0x08
    1282:	a9 87       	std	Y+9, r26	; 0x09
    1284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1286:	6f 81       	ldd	r22, Y+7	; 0x07
    1288:	78 85       	ldd	r23, Y+8	; 0x08
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	9a 85       	ldd	r25, Y+10	; 0x0a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <CLCD_voidWriteData+0x27a>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <CLCD_voidWriteData+0x2f8>
	else if (__tmp > 65535)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <CLCD_voidWriteData+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <CLCD_voidWriteData+0x2da>
    12ea:	84 e1       	ldi	r24, 0x14	; 20
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	8b 83       	std	Y+3, r24	; 0x03
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <CLCD_voidWriteData+0x2c8>
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <CLCD_voidWriteData+0x2bc>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <CLCD_voidWriteData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <CLCD_voidWriteData+0x304>
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    133a:	6d 96       	adiw	r28, 0x1d	; 29
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <CLCD_voidWriteCmd>:

void CLCD_voidWriteCmd(u8 Copy_u8Command)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	6d 97       	sbiw	r28, 0x1d	; 29
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	8d 8f       	std	Y+29, r24	; 0x1d
	/*RS = 0*/
	SetPinValue(CLCD_u8_RS_PORT,CLCD_u8_RS_PIN,0);
    1362:	84 e4       	ldi	r24, 0x44	; 68
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*RW = 0*/
	SetPinValue(CLCD_u8_RW_PORT,CLCD_u8_RW_PIN,0);
    1372:	84 e4       	ldi	r24, 0x44	; 68
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*Command */
	SetPinValue(CLCD_u8_D0_PORT,CLCD_u8_D0_PIN,GET_BIT(Copy_u8Command,0));
    1382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 01       	movw	r18, r24
    138a:	21 70       	andi	r18, 0x01	; 1
    138c:	30 70       	andi	r19, 0x00	; 0
    138e:	83 e4       	ldi	r24, 0x43	; 67
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D1_PORT,CLCD_u8_D1_PIN,GET_BIT(Copy_u8Command,1));
    139c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    139e:	86 95       	lsr	r24
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 01       	movw	r18, r24
    13a6:	21 70       	andi	r18, 0x01	; 1
    13a8:	30 70       	andi	r19, 0x00	; 0
    13aa:	83 e4       	ldi	r24, 0x43	; 67
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D2_PORT,CLCD_u8_D2_PIN,GET_BIT(Copy_u8Command,2));
    13b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ba:	86 95       	lsr	r24
    13bc:	86 95       	lsr	r24
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 01       	movw	r18, r24
    13c4:	21 70       	andi	r18, 0x01	; 1
    13c6:	30 70       	andi	r19, 0x00	; 0
    13c8:	83 e4       	ldi	r24, 0x43	; 67
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	62 e0       	ldi	r22, 0x02	; 2
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D3_PORT,CLCD_u8_D3_PIN,GET_BIT(Copy_u8Command,3));
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	86 95       	lsr	r24
    13da:	86 95       	lsr	r24
    13dc:	86 95       	lsr	r24
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 01       	movw	r18, r24
    13e4:	21 70       	andi	r18, 0x01	; 1
    13e6:	30 70       	andi	r19, 0x00	; 0
    13e8:	83 e4       	ldi	r24, 0x43	; 67
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	63 e0       	ldi	r22, 0x03	; 3
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	a9 01       	movw	r20, r18
    13f2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D4_PORT,CLCD_u8_D4_PIN,GET_BIT(Copy_u8Command,4));
    13f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f8:	82 95       	swap	r24
    13fa:	8f 70       	andi	r24, 0x0F	; 15
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9c 01       	movw	r18, r24
    1402:	21 70       	andi	r18, 0x01	; 1
    1404:	30 70       	andi	r19, 0x00	; 0
    1406:	83 e4       	ldi	r24, 0x43	; 67
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	64 e0       	ldi	r22, 0x04	; 4
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	a9 01       	movw	r20, r18
    1410:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D5_PORT,CLCD_u8_D5_PIN,GET_BIT(Copy_u8Command,5));
    1414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1416:	82 95       	swap	r24
    1418:	86 95       	lsr	r24
    141a:	87 70       	andi	r24, 0x07	; 7
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9c 01       	movw	r18, r24
    1422:	21 70       	andi	r18, 0x01	; 1
    1424:	30 70       	andi	r19, 0x00	; 0
    1426:	83 e4       	ldi	r24, 0x43	; 67
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	65 e0       	ldi	r22, 0x05	; 5
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D6_PORT,CLCD_u8_D6_PIN,GET_BIT(Copy_u8Command,6));
    1434:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1436:	82 95       	swap	r24
    1438:	86 95       	lsr	r24
    143a:	86 95       	lsr	r24
    143c:	83 70       	andi	r24, 0x03	; 3
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 01       	movw	r18, r24
    1444:	21 70       	andi	r18, 0x01	; 1
    1446:	30 70       	andi	r19, 0x00	; 0
    1448:	83 e4       	ldi	r24, 0x43	; 67
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	66 e0       	ldi	r22, 0x06	; 6
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(CLCD_u8_D7_PORT,CLCD_u8_D7_PIN,GET_BIT(Copy_u8Command,7));
    1456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1458:	88 1f       	adc	r24, r24
    145a:	88 27       	eor	r24, r24
    145c:	88 1f       	adc	r24, r24
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	83 e4       	ldi	r24, 0x43	; 67
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	67 e0       	ldi	r22, 0x07	; 7
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	/*E pulse*/
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,1);
    1470:	84 e4       	ldi	r24, 0x44	; 68
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e4       	ldi	r27, 0x40	; 64
    1488:	89 8f       	std	Y+25, r24	; 0x19
    148a:	9a 8f       	std	Y+26, r25	; 0x1a
    148c:	ab 8f       	std	Y+27, r26	; 0x1b
    148e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1490:	69 8d       	ldd	r22, Y+25	; 0x19
    1492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	48 e4       	ldi	r20, 0x48	; 72
    149e:	53 e4       	ldi	r21, 0x43	; 67
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	8d 8b       	std	Y+21, r24	; 0x15
    14aa:	9e 8b       	std	Y+22, r25	; 0x16
    14ac:	af 8b       	std	Y+23, r26	; 0x17
    14ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14b0:	6d 89       	ldd	r22, Y+21	; 0x15
    14b2:	7e 89       	ldd	r23, Y+22	; 0x16
    14b4:	8f 89       	ldd	r24, Y+23	; 0x17
    14b6:	98 8d       	ldd	r25, Y+24	; 0x18
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <CLCD_voidWriteCmd+0x186>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9c 8b       	std	Y+20, r25	; 0x14
    14ce:	8b 8b       	std	Y+19, r24	; 0x13
    14d0:	3f c0       	rjmp	.+126    	; 0x1550 <CLCD_voidWriteCmd+0x204>
	else if (__tmp > 65535)
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	4c f5       	brge	.+82     	; 0x153c <CLCD_voidWriteCmd+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ea:	69 8d       	ldd	r22, Y+25	; 0x19
    14ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e2       	ldi	r20, 0x20	; 32
    14f8:	51 e4       	ldi	r21, 0x41	; 65
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <CLCD_voidWriteCmd+0x1e6>
    1514:	84 e1       	ldi	r24, 0x14	; 20
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	89 8b       	std	Y+17, r24	; 0x11
    151c:	89 89       	ldd	r24, Y+17	; 0x11
    151e:	9a 89       	ldd	r25, Y+18	; 0x12
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <CLCD_voidWriteCmd+0x1d4>
    1524:	9a 8b       	std	Y+18, r25	; 0x12
    1526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1528:	8b 89       	ldd	r24, Y+19	; 0x13
    152a:	9c 89       	ldd	r25, Y+20	; 0x14
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	8b 89       	ldd	r24, Y+19	; 0x13
    1534:	9c 89       	ldd	r25, Y+20	; 0x14
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	69 f7       	brne	.-38     	; 0x1514 <CLCD_voidWriteCmd+0x1c8>
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <CLCD_voidWriteCmd+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153c:	6d 89       	ldd	r22, Y+21	; 0x15
    153e:	7e 89       	ldd	r23, Y+22	; 0x16
    1540:	8f 89       	ldd	r24, Y+23	; 0x17
    1542:	98 8d       	ldd	r25, Y+24	; 0x18
    1544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9c 8b       	std	Y+20, r25	; 0x14
    154e:	8b 8b       	std	Y+19, r24	; 0x13
    1550:	8b 89       	ldd	r24, Y+19	; 0x13
    1552:	9c 89       	ldd	r25, Y+20	; 0x14
    1554:	98 8b       	std	Y+16, r25	; 0x10
    1556:	8f 87       	std	Y+15, r24	; 0x0f
    1558:	8f 85       	ldd	r24, Y+15	; 0x0f
    155a:	98 89       	ldd	r25, Y+16	; 0x10
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <CLCD_voidWriteCmd+0x210>
    1560:	98 8b       	std	Y+16, r25	; 0x10
    1562:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	SetPinValue(CLCD_u8_E_PORT,CLCD_u8_E_PIN,0);
    1564:	84 e4       	ldi	r24, 0x44	; 68
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e4       	ldi	r27, 0x40	; 64
    157c:	8b 87       	std	Y+11, r24	; 0x0b
    157e:	9c 87       	std	Y+12, r25	; 0x0c
    1580:	ad 87       	std	Y+13, r26	; 0x0d
    1582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	6b 85       	ldd	r22, Y+11	; 0x0b
    1586:	7c 85       	ldd	r23, Y+12	; 0x0c
    1588:	8d 85       	ldd	r24, Y+13	; 0x0d
    158a:	9e 85       	ldd	r25, Y+14	; 0x0e
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	48 e4       	ldi	r20, 0x48	; 72
    1592:	53 e4       	ldi	r21, 0x43	; 67
    1594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	8f 83       	std	Y+7, r24	; 0x07
    159e:	98 87       	std	Y+8, r25	; 0x08
    15a0:	a9 87       	std	Y+9, r26	; 0x09
    15a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a4:	6f 81       	ldd	r22, Y+7	; 0x07
    15a6:	78 85       	ldd	r23, Y+8	; 0x08
    15a8:	89 85       	ldd	r24, Y+9	; 0x09
    15aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e8       	ldi	r20, 0x80	; 128
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <CLCD_voidWriteCmd+0x27a>
		__ticks = 1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	3f c0       	rjmp	.+126    	; 0x1644 <CLCD_voidWriteCmd+0x2f8>
	else if (__tmp > 65535)
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	4c f5       	brge	.+82     	; 0x1630 <CLCD_voidWriteCmd+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e2       	ldi	r20, 0x20	; 32
    15ec:	51 e4       	ldi	r21, 0x41	; 65
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	bc 01       	movw	r22, r24
    15f8:	cd 01       	movw	r24, r26
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	0f c0       	rjmp	.+30     	; 0x1626 <CLCD_voidWriteCmd+0x2da>
    1608:	84 e1       	ldi	r24, 0x14	; 20
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <CLCD_voidWriteCmd+0x2c8>
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	69 f7       	brne	.-38     	; 0x1608 <CLCD_voidWriteCmd+0x2bc>
    162e:	14 c0       	rjmp	.+40     	; 0x1658 <CLCD_voidWriteCmd+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1630:	6f 81       	ldd	r22, Y+7	; 0x07
    1632:	78 85       	ldd	r23, Y+8	; 0x08
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	9e 81       	ldd	r25, Y+6	; 0x06
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	9a 81       	ldd	r25, Y+2	; 0x02
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <CLCD_voidWriteCmd+0x304>
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1658:	6d 96       	adiw	r28, 0x1d	; 29
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <CLCD_voidCursorPosition>:

void CLCD_voidCursorPosition(u8 row, u8 column)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <CLCD_voidCursorPosition+0x6>
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	6b 83       	std	Y+3, r22	; 0x03
	u8 cursor_position= (0b10000000|(row<<6)|(column));
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	00 24       	eor	r0, r0
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	07 94       	ror	r0
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	07 94       	ror	r0
    168e:	98 2f       	mov	r25, r24
    1690:	80 2d       	mov	r24, r0
    1692:	98 2f       	mov	r25, r24
    1694:	90 68       	ori	r25, 0x80	; 128
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	89 2b       	or	r24, r25
    169a:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidWriteCmd(cursor_position);
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0e 94 a6 09 	call	0x134c	; 0x134c <CLCD_voidWriteCmd>
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <LCD_voidWriteString>:

void LCD_voidWriteString(u8 data_string[16])
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <LCD_voidWriteString+0x6>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	9b 83       	std	Y+3, r25	; 0x03
    16bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;
	for(i = 0;i <= 15;i++)
    16be:	19 82       	std	Y+1, r1	; 0x01
    16c0:	19 c0       	rjmp	.+50     	; 0x16f4 <LCD_voidWriteString+0x46>
	{
		if (data_string[i] != '\0')
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	fc 01       	movw	r30, r24
    16ce:	e2 0f       	add	r30, r18
    16d0:	f3 1f       	adc	r31, r19
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	89 f0       	breq	.+34     	; 0x16fa <LCD_voidWriteString+0x4c>
		{CLCD_voidWriteData(data_string[i]);}
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	fc 01       	movw	r30, r24
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	80 81       	ld	r24, Z
    16ea:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
}

void LCD_voidWriteString(u8 data_string[16])
{
	u8 i ;
	for(i = 0;i <= 15;i++)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	80 31       	cpi	r24, 0x10	; 16
    16f8:	20 f3       	brcs	.-56     	; 0x16c2 <LCD_voidWriteString+0x14>
		if (data_string[i] != '\0')
		{CLCD_voidWriteData(data_string[i]);}
		else
		{return;}
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <SetPinDir>:
#include "DIO_private.h"
#include "DIO_register.h"
#include "DIO_config.h"

void SetPinDir(u8 Port,u8 Pin,u8 Dir)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <SetPinDir+0x6>
    170c:	00 d0       	rcall	.+0      	; 0x170e <SetPinDir+0x8>
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
    1718:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3d 83       	std	Y+5, r19	; 0x05
    1722:	2c 83       	std	Y+4, r18	; 0x04
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	82 34       	cpi	r24, 0x42	; 66
    172a:	91 05       	cpc	r25, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <SetPinDir+0x2a>
    172e:	44 c0       	rjmp	.+136    	; 0x17b8 <SetPinDir+0xb2>
    1730:	2c 81       	ldd	r18, Y+4	; 0x04
    1732:	3d 81       	ldd	r19, Y+5	; 0x05
    1734:	23 34       	cpi	r18, 0x43	; 67
    1736:	31 05       	cpc	r19, r1
    1738:	34 f4       	brge	.+12     	; 0x1746 <SetPinDir+0x40>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	81 34       	cpi	r24, 0x41	; 65
    1740:	91 05       	cpc	r25, r1
    1742:	71 f0       	breq	.+28     	; 0x1760 <SetPinDir+0x5a>
    1744:	bc c0       	rjmp	.+376    	; 0x18be <SetPinDir+0x1b8>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	23 34       	cpi	r18, 0x43	; 67
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <SetPinDir+0x4c>
    1750:	5f c0       	rjmp	.+190    	; 0x1810 <SetPinDir+0x10a>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	84 34       	cpi	r24, 0x44	; 68
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <SetPinDir+0x58>
    175c:	85 c0       	rjmp	.+266    	; 0x1868 <SetPinDir+0x162>
    175e:	af c0       	rjmp	.+350    	; 0x18be <SetPinDir+0x1b8>
	{
		case'A':
			if(Dir==0)
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 23       	and	r24, r24
    1764:	a9 f4       	brne	.+42     	; 0x1790 <SetPinDir+0x8a>
			{
				CLR_BIT(DDRA,Pin);
    1766:	aa e3       	ldi	r26, 0x3A	; 58
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ea e3       	ldi	r30, 0x3A	; 58
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <SetPinDir+0x7e>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <SetPinDir+0x7a>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	97 c0       	rjmp	.+302    	; 0x18be <SetPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRA,Pin);	
    1790:	aa e3       	ldi	r26, 0x3A	; 58
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ea e3       	ldi	r30, 0x3A	; 58
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <SetPinDir+0xa8>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <SetPinDir+0xa4>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	83 c0       	rjmp	.+262    	; 0x18be <SetPinDir+0x1b8>
			}
			break;
		case'B':
			if(Dir==0)
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 23       	and	r24, r24
    17bc:	a9 f4       	brne	.+42     	; 0x17e8 <SetPinDir+0xe2>
			{
				CLR_BIT(DDRB,Pin);	
    17be:	a7 e3       	ldi	r26, 0x37	; 55
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e7 e3       	ldi	r30, 0x37	; 55
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <SetPinDir+0xd6>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <SetPinDir+0xd2>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	6b c0       	rjmp	.+214    	; 0x18be <SetPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRB,Pin);	
    17e8:	a7 e3       	ldi	r26, 0x37	; 55
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e7 e3       	ldi	r30, 0x37	; 55
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <SetPinDir+0x100>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <SetPinDir+0xfc>
    180a:	84 2b       	or	r24, r20
    180c:	8c 93       	st	X, r24
    180e:	57 c0       	rjmp	.+174    	; 0x18be <SetPinDir+0x1b8>
			}
			break;
		case'C':
			if(Dir==0)
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 23       	and	r24, r24
    1814:	a9 f4       	brne	.+42     	; 0x1840 <SetPinDir+0x13a>
			{
				CLR_BIT(DDRC,Pin);
    1816:	a4 e3       	ldi	r26, 0x34	; 52
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e4 e3       	ldi	r30, 0x34	; 52
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <SetPinDir+0x12e>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <SetPinDir+0x12a>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	3f c0       	rjmp	.+126    	; 0x18be <SetPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRC,Pin);	
    1840:	a4 e3       	ldi	r26, 0x34	; 52
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e4 e3       	ldi	r30, 0x34	; 52
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <SetPinDir+0x158>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <SetPinDir+0x154>
    1862:	84 2b       	or	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	2b c0       	rjmp	.+86     	; 0x18be <SetPinDir+0x1b8>
			}
			break;
		case'D':
			if(Dir==0)
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	88 23       	and	r24, r24
    186c:	a9 f4       	brne	.+42     	; 0x1898 <SetPinDir+0x192>
			{
				CLR_BIT(DDRD,Pin);	
    186e:	a1 e3       	ldi	r26, 0x31	; 49
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e1 e3       	ldi	r30, 0x31	; 49
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <SetPinDir+0x186>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <SetPinDir+0x182>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	13 c0       	rjmp	.+38     	; 0x18be <SetPinDir+0x1b8>
			}
			else
			{
				SET_BIT(DDRD,Pin);	
    1898:	a1 e3       	ldi	r26, 0x31	; 49
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e1 e3       	ldi	r30, 0x31	; 49
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <SetPinDir+0x1b0>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <SetPinDir+0x1ac>
    18ba:	84 2b       	or	r24, r20
    18bc:	8c 93       	st	X, r24
			}
			break;
	}	
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <SetPinValue>:

void SetPinValue(u8 Port,u8 Pin,u8 Val)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <SetPinValue+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <SetPinValue+0x8>
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
    18e0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3d 83       	std	Y+5, r19	; 0x05
    18ea:	2c 83       	std	Y+4, r18	; 0x04
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	82 34       	cpi	r24, 0x42	; 66
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <SetPinValue+0x2a>
    18f6:	44 c0       	rjmp	.+136    	; 0x1980 <SetPinValue+0xb2>
    18f8:	2c 81       	ldd	r18, Y+4	; 0x04
    18fa:	3d 81       	ldd	r19, Y+5	; 0x05
    18fc:	23 34       	cpi	r18, 0x43	; 67
    18fe:	31 05       	cpc	r19, r1
    1900:	34 f4       	brge	.+12     	; 0x190e <SetPinValue+0x40>
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
    1904:	9d 81       	ldd	r25, Y+5	; 0x05
    1906:	81 34       	cpi	r24, 0x41	; 65
    1908:	91 05       	cpc	r25, r1
    190a:	71 f0       	breq	.+28     	; 0x1928 <SetPinValue+0x5a>
    190c:	bc c0       	rjmp	.+376    	; 0x1a86 <SetPinValue+0x1b8>
    190e:	2c 81       	ldd	r18, Y+4	; 0x04
    1910:	3d 81       	ldd	r19, Y+5	; 0x05
    1912:	23 34       	cpi	r18, 0x43	; 67
    1914:	31 05       	cpc	r19, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <SetPinValue+0x4c>
    1918:	5f c0       	rjmp	.+190    	; 0x19d8 <SetPinValue+0x10a>
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	84 34       	cpi	r24, 0x44	; 68
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <SetPinValue+0x58>
    1924:	85 c0       	rjmp	.+266    	; 0x1a30 <SetPinValue+0x162>
    1926:	af c0       	rjmp	.+350    	; 0x1a86 <SetPinValue+0x1b8>
	{
		case'A':
			if(Val==0)
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	88 23       	and	r24, r24
    192c:	a9 f4       	brne	.+42     	; 0x1958 <SetPinValue+0x8a>
			{
				CLR_BIT(PORTA,Pin);	
    192e:	ab e3       	ldi	r26, 0x3B	; 59
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	eb e3       	ldi	r30, 0x3B	; 59
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <SetPinValue+0x7e>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <SetPinValue+0x7a>
    1950:	80 95       	com	r24
    1952:	84 23       	and	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	97 c0       	rjmp	.+302    	; 0x1a86 <SetPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTA,Pin);	
    1958:	ab e3       	ldi	r26, 0x3B	; 59
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	eb e3       	ldi	r30, 0x3B	; 59
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <SetPinValue+0xa8>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <SetPinValue+0xa4>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	83 c0       	rjmp	.+262    	; 0x1a86 <SetPinValue+0x1b8>
			}
			break;
		case'B':
			if(Val==0)
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	88 23       	and	r24, r24
    1984:	a9 f4       	brne	.+42     	; 0x19b0 <SetPinValue+0xe2>
			{
				CLR_BIT(PORTB,Pin);	
    1986:	a8 e3       	ldi	r26, 0x38	; 56
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e8 e3       	ldi	r30, 0x38	; 56
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <SetPinValue+0xd6>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <SetPinValue+0xd2>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	6b c0       	rjmp	.+214    	; 0x1a86 <SetPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTB,Pin);	
    19b0:	a8 e3       	ldi	r26, 0x38	; 56
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e8 e3       	ldi	r30, 0x38	; 56
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <SetPinValue+0x100>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <SetPinValue+0xfc>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	57 c0       	rjmp	.+174    	; 0x1a86 <SetPinValue+0x1b8>
			}
			break;
		case'C':
			if(Val==0)
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 23       	and	r24, r24
    19dc:	a9 f4       	brne	.+42     	; 0x1a08 <SetPinValue+0x13a>
			{
				CLR_BIT(PORTC,Pin);	
    19de:	a5 e3       	ldi	r26, 0x35	; 53
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <SetPinValue+0x12e>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <SetPinValue+0x12a>
    1a00:	80 95       	com	r24
    1a02:	84 23       	and	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <SetPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTC,Pin);	
    1a08:	a5 e3       	ldi	r26, 0x35	; 53
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e5 e3       	ldi	r30, 0x35	; 53
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <SetPinValue+0x158>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <SetPinValue+0x154>
    1a2a:	84 2b       	or	r24, r20
    1a2c:	8c 93       	st	X, r24
    1a2e:	2b c0       	rjmp	.+86     	; 0x1a86 <SetPinValue+0x1b8>
			}
			break;
		case'D':
			if(Val==0)
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 23       	and	r24, r24
    1a34:	a9 f4       	brne	.+42     	; 0x1a60 <SetPinValue+0x192>
			{
				CLR_BIT(PORTD,Pin);	
    1a36:	a2 e3       	ldi	r26, 0x32	; 50
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <SetPinValue+0x186>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <SetPinValue+0x182>
    1a58:	80 95       	com	r24
    1a5a:	84 23       	and	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	13 c0       	rjmp	.+38     	; 0x1a86 <SetPinValue+0x1b8>
			}
			else
			{
				SET_BIT(PORTD,Pin);	
    1a60:	a2 e3       	ldi	r26, 0x32	; 50
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e2 e3       	ldi	r30, 0x32	; 50
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <SetPinValue+0x1b0>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <SetPinValue+0x1ac>
    1a82:	84 2b       	or	r24, r20
    1a84:	8c 93       	st	X, r24
			}
			break;
	}
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GetPinValue>:

u8 GetPinValue(u8 Port,u8 Pin) // @suppress("No return")
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <GetPinValue+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GetPinValue+0x8>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GetPinValue+0xa>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	3d 83       	std	Y+5, r19	; 0x05
    1ab0:	2c 83       	std	Y+4, r18	; 0x04
    1ab2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ab4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ab6:	42 34       	cpi	r20, 0x42	; 66
    1ab8:	51 05       	cpc	r21, r1
    1aba:	49 f1       	breq	.+82     	; 0x1b0e <GetPinValue+0x78>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	83 34       	cpi	r24, 0x43	; 67
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	34 f4       	brge	.+12     	; 0x1ad2 <GetPinValue+0x3c>
    1ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aca:	21 34       	cpi	r18, 0x41	; 65
    1acc:	31 05       	cpc	r19, r1
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <GetPinValue+0x52>
    1ad0:	57 c0       	rjmp	.+174    	; 0x1b80 <GetPinValue+0xea>
    1ad2:	4c 81       	ldd	r20, Y+4	; 0x04
    1ad4:	5d 81       	ldd	r21, Y+5	; 0x05
    1ad6:	43 34       	cpi	r20, 0x43	; 67
    1ad8:	51 05       	cpc	r21, r1
    1ada:	61 f1       	breq	.+88     	; 0x1b34 <GetPinValue+0x9e>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae0:	84 34       	cpi	r24, 0x44	; 68
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	d1 f1       	breq	.+116    	; 0x1b5a <GetPinValue+0xc4>
    1ae6:	4c c0       	rjmp	.+152    	; 0x1b80 <GetPinValue+0xea>
	{
		case'A':
			return GET_BIT(PINA,Pin);	
    1ae8:	e9 e3       	ldi	r30, 0x39	; 57
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GetPinValue+0x6a>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GetPinValue+0x66>
    1b04:	ca 01       	movw	r24, r20
    1b06:	58 2f       	mov	r21, r24
    1b08:	51 70       	andi	r21, 0x01	; 1
    1b0a:	5b 83       	std	Y+3, r21	; 0x03
    1b0c:	3a c0       	rjmp	.+116    	; 0x1b82 <GetPinValue+0xec>
			break;
		case'B':
			return  GET_BIT(PINB,Pin);	
    1b0e:	e6 e3       	ldi	r30, 0x36	; 54
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	88 2f       	mov	r24, r24
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a9 01       	movw	r20, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GetPinValue+0x90>
    1b22:	55 95       	asr	r21
    1b24:	47 95       	ror	r20
    1b26:	8a 95       	dec	r24
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GetPinValue+0x8c>
    1b2a:	ca 01       	movw	r24, r20
    1b2c:	58 2f       	mov	r21, r24
    1b2e:	51 70       	andi	r21, 0x01	; 1
    1b30:	5b 83       	std	Y+3, r21	; 0x03
    1b32:	27 c0       	rjmp	.+78     	; 0x1b82 <GetPinValue+0xec>
			break;
		case'C':
			return  GET_BIT(PINC,Pin);		
    1b34:	e3 e3       	ldi	r30, 0x33	; 51
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a9 01       	movw	r20, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GetPinValue+0xb6>
    1b48:	55 95       	asr	r21
    1b4a:	47 95       	ror	r20
    1b4c:	8a 95       	dec	r24
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GetPinValue+0xb2>
    1b50:	ca 01       	movw	r24, r20
    1b52:	58 2f       	mov	r21, r24
    1b54:	51 70       	andi	r21, 0x01	; 1
    1b56:	5b 83       	std	Y+3, r21	; 0x03
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <GetPinValue+0xec>
			break;
		case'D':
			return  GET_BIT(PIND,Pin);
    1b5a:	e0 e3       	ldi	r30, 0x30	; 48
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a9 01       	movw	r20, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <GetPinValue+0xdc>
    1b6e:	55 95       	asr	r21
    1b70:	47 95       	ror	r20
    1b72:	8a 95       	dec	r24
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <GetPinValue+0xd8>
    1b76:	ca 01       	movw	r24, r20
    1b78:	58 2f       	mov	r21, r24
    1b7a:	51 70       	andi	r21, 0x01	; 1
    1b7c:	5b 83       	std	Y+3, r21	; 0x03
    1b7e:	01 c0       	rjmp	.+2      	; 0x1b82 <GetPinValue+0xec>
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GetPinValue+0xf0>
			break;
	}
}
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	8e 83       	std	Y+6, r24	; 0x06
    1b86:	8e 81       	ldd	r24, Y+6	; 0x06
    1b88:	26 96       	adiw	r28, 0x06	; 6
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <Keypad_GetKey>:
u8 Keypad_COLS_PORT[KEYPAD_COL_NUM] = {KEYPAD_C0_PORT,KEYPAD_C1_PORT,KEYPAD_C2_PORT};
u8 Keypad_COLS_PIN[KEYPAD_COL_NUM] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN};
u8 Keypad_output[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_KEYS;

u8 Keypad_GetKey ()
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <Keypad_GetKey+0x6>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	u8 i,j;
	for(i = 0;i<KEYPAD_ROW_NUM;i++)
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	58 c0       	rjmp	.+176    	; 0x1c5a <Keypad_GetKey+0xc0>
	{
		SetPinValue(Keypad_ROWS_PORT[i],Keypad_ROWS_PIN[i],0);
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	ed 52       	subi	r30, 0x2D	; 45
    1bb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb6:	20 81       	ld	r18, Z
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	e9 52       	subi	r30, 0x29	; 41
    1bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc4:	90 81       	ld	r25, Z
    1bc6:	82 2f       	mov	r24, r18
    1bc8:	69 2f       	mov	r22, r25
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
		for(j = 0;j<KEYPAD_COL_NUM;j++)
    1bd0:	19 82       	std	Y+1, r1	; 0x01
    1bd2:	2a c0       	rjmp	.+84     	; 0x1c28 <Keypad_GetKey+0x8e>
		{
			if(!GetPinValue(Keypad_COLS_PORT[j],Keypad_COLS_PIN[j]))
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e5 52       	subi	r30, 0x25	; 37
    1bde:	fe 4f       	sbci	r31, 0xFE	; 254
    1be0:	20 81       	ld	r18, Z
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	fc 01       	movw	r30, r24
    1bea:	e2 52       	subi	r30, 0x22	; 34
    1bec:	fe 4f       	sbci	r31, 0xFE	; 254
    1bee:	90 81       	ld	r25, Z
    1bf0:	82 2f       	mov	r24, r18
    1bf2:	69 2f       	mov	r22, r25
    1bf4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    1bf8:	88 23       	and	r24, r24
    1bfa:	99 f4       	brne	.+38     	; 0x1c22 <Keypad_GetKey+0x88>
				{return Keypad_output[i][j];}
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	48 2f       	mov	r20, r24
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	c9 01       	movw	r24, r18
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	84 0f       	add	r24, r20
    1c14:	95 1f       	adc	r25, r21
    1c16:	fc 01       	movw	r30, r24
    1c18:	ef 51       	subi	r30, 0x1F	; 31
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	21 c0       	rjmp	.+66     	; 0x1c64 <Keypad_GetKey+0xca>
{
	u8 i,j;
	for(i = 0;i<KEYPAD_ROW_NUM;i++)
	{
		SetPinValue(Keypad_ROWS_PORT[i],Keypad_ROWS_PIN[i],0);
		for(j = 0;j<KEYPAD_COL_NUM;j++)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	98 f2       	brcs	.-90     	; 0x1bd4 <Keypad_GetKey+0x3a>
		{
			if(!GetPinValue(Keypad_COLS_PORT[j],Keypad_COLS_PIN[j]))
				{return Keypad_output[i][j];}
		}
		SetPinValue(Keypad_ROWS_PORT[i],Keypad_ROWS_PIN[i],1);
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	88 2f       	mov	r24, r24
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	fc 01       	movw	r30, r24
    1c36:	ed 52       	subi	r30, 0x2D	; 45
    1c38:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3a:	20 81       	ld	r18, Z
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	fc 01       	movw	r30, r24
    1c44:	e9 52       	subi	r30, 0x29	; 41
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	90 81       	ld	r25, Z
    1c4a:	82 2f       	mov	r24, r18
    1c4c:	69 2f       	mov	r22, r25
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
u8 Keypad_output[KEYPAD_ROW_NUM][KEYPAD_COL_NUM] = KEYPAD_KEYS;

u8 Keypad_GetKey ()
{
	u8 i,j;
	for(i = 0;i<KEYPAD_ROW_NUM;i++)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	84 30       	cpi	r24, 0x04	; 4
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <Keypad_GetKey+0xc8>
    1c60:	a4 cf       	rjmp	.-184    	; 0x1baa <Keypad_GetKey+0x10>
			if(!GetPinValue(Keypad_COLS_PORT[j],Keypad_COLS_PIN[j]))
				{return Keypad_output[i][j];}
		}
		SetPinValue(Keypad_ROWS_PORT[i],Keypad_ROWS_PIN[i],1);
	}
	return 0;
    1c62:	1b 82       	std	Y+3, r1	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <SetLedOn>:

#include "LED_interface.h"
#include "LED_private.h"
#include "LED_config.h"
void SetLedOn (void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
	SetPinValue(LED_Port,LED_Pin,LED_Mode);
    1c7a:	81 e4       	ldi	r24, 0x41	; 65
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
}
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <SetLedOff>:
void SetLedOff(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	SetPinValue(LED_Port,LED_Pin,LED_Mode^0x01);
    1c92:	81 e4       	ldi	r24, 0x41	; 65
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <PortInitialize>:
#include "PORT_config.h"
#include "PORT_private.h"


void PortInitialize(void)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1caa:	ea e3       	ldi	r30, 0x3A	; 58
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1cb2:	e7 e3       	ldi	r30, 0x37	; 55
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1cba:	e4 e3       	ldi	r30, 0x34	; 52
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1cc2:	e1 e3       	ldi	r30, 0x31	; 49
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	87 e0       	ldi	r24, 0x07	; 7
    1cc8:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
    1cca:	eb e3       	ldi	r30, 0x3B	; 59
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1cd0:	e8 e3       	ldi	r30, 0x38	; 56
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1cd6:	e5 e3       	ldi	r30, 0x35	; 53
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1cdc:	e2 e3       	ldi	r30, 0x32	; 50
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	88 ef       	ldi	r24, 0xF8	; 248
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <SevenSeg_Enable>:
#endif
u8 SEVENSEEG_EnablePorts[SEVENSEG_NUMBER]={SEG_Port_common1};
u8 SEVENSEEG_EnablePins[SEVENSEG_NUMBER]={SEG_Pin_common1};
u8 last_value[SEVENSEG_NUMBER]={ONE};
void SevenSeg_Enable(u8 SEG_NUMBER)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(SEVENSEEG_EnablePorts[SEG_NUMBER],SEVENSEEG_EnablePins[SEG_NUMBER],SEG_Mode);
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e0 50       	subi	r30, 0x00	; 0
    1d00:	fe 4f       	sbci	r31, 0xFE	; 254
    1d02:	20 81       	ld	r18, Z
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	ec 5f       	subi	r30, 0xFC	; 252
    1d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d10:	90 81       	ld	r25, Z
    1d12:	82 2f       	mov	r24, r18
    1d14:	69 2f       	mov	r22, r25
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SevenSeg_SetNumber (ZERO,SEG_NUMBER);
    1d1c:	80 ec       	ldi	r24, 0xC0	; 192
    1d1e:	69 81       	ldd	r22, Y+1	; 0x01
    1d20:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <SevenSeg_SetNumber>
}
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <SevenSeg_Disable>:
void SevenSeg_Disable(u8 SEG_NUMBER)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	0f 92       	push	r0
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	89 83       	std	Y+1, r24	; 0x01
	SetPinValue(SEVENSEEG_EnablePorts[SEG_NUMBER],SEVENSEEG_EnablePins[SEG_NUMBER],SEG_Mode^0x01);
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e0 50       	subi	r30, 0x00	; 0
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	20 81       	ld	r18, Z
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	ec 5f       	subi	r30, 0xFC	; 252
    1d50:	fd 4f       	sbci	r31, 0xFD	; 253
    1d52:	90 81       	ld	r25, Z
    1d54:	82 2f       	mov	r24, r18
    1d56:	69 2f       	mov	r22, r25
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <SevenSeg_SetNumber>:

void SevenSeg_SetNumber (u8 number , u8 seg_select)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <SevenSeg_SetNumber+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	6a 83       	std	Y+2, r22	; 0x02
	last_value[seg_select] = number;
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	ef 5f       	subi	r30, 0xFF	; 255
    1d7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	80 83       	st	Z, r24
	SetPinValue(SEG_Port_a,SEG_Pin_a,GET_BIT(SevenSeg_arr[number],0));
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e3 51       	subi	r30, 0x13	; 19
    1d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d90:	80 81       	ld	r24, Z
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	81 e4       	ldi	r24, 0x41	; 65
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	49 2f       	mov	r20, r25
    1d9c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_b,SEG_Pin_b,GET_BIT(SevenSeg_arr[number],1));
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	88 2f       	mov	r24, r24
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	fc 01       	movw	r30, r24
    1da8:	e3 51       	subi	r30, 0x13	; 19
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dac:	80 81       	ld	r24, Z
    1dae:	86 95       	lsr	r24
    1db0:	98 2f       	mov	r25, r24
    1db2:	91 70       	andi	r25, 0x01	; 1
    1db4:	81 e4       	ldi	r24, 0x41	; 65
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	49 2f       	mov	r20, r25
    1dba:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_c,SEG_Pin_c,GET_BIT(SevenSeg_arr[number],2));
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e3 51       	subi	r30, 0x13	; 19
    1dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dca:	80 81       	ld	r24, Z
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	81 e4       	ldi	r24, 0x41	; 65
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_d,SEG_Pin_d,GET_BIT(SevenSeg_arr[number],3));
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	fc 01       	movw	r30, r24
    1de6:	e3 51       	subi	r30, 0x13	; 19
    1de8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dea:	80 81       	ld	r24, Z
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	86 95       	lsr	r24
    1df2:	98 2f       	mov	r25, r24
    1df4:	91 70       	andi	r25, 0x01	; 1
    1df6:	81 e4       	ldi	r24, 0x41	; 65
    1df8:	63 e0       	ldi	r22, 0x03	; 3
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_e,SEG_Pin_e,GET_BIT(SevenSeg_arr[number],4));
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	fc 01       	movw	r30, r24
    1e08:	e3 51       	subi	r30, 0x13	; 19
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	80 81       	ld	r24, Z
    1e0e:	82 95       	swap	r24
    1e10:	8f 70       	andi	r24, 0x0F	; 15
    1e12:	98 2f       	mov	r25, r24
    1e14:	91 70       	andi	r25, 0x01	; 1
    1e16:	81 e4       	ldi	r24, 0x41	; 65
    1e18:	64 e0       	ldi	r22, 0x04	; 4
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_f,SEG_Pin_f,GET_BIT(SevenSeg_arr[number],5));
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	fc 01       	movw	r30, r24
    1e28:	e3 51       	subi	r30, 0x13	; 19
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	80 81       	ld	r24, Z
    1e2e:	82 95       	swap	r24
    1e30:	86 95       	lsr	r24
    1e32:	87 70       	andi	r24, 0x07	; 7
    1e34:	98 2f       	mov	r25, r24
    1e36:	91 70       	andi	r25, 0x01	; 1
    1e38:	81 e4       	ldi	r24, 0x41	; 65
    1e3a:	65 e0       	ldi	r22, 0x05	; 5
    1e3c:	49 2f       	mov	r20, r25
    1e3e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_g,SEG_Pin_g,GET_BIT(SevenSeg_arr[number],6));
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fc 01       	movw	r30, r24
    1e4a:	e3 51       	subi	r30, 0x13	; 19
    1e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 95       	swap	r24
    1e52:	86 95       	lsr	r24
    1e54:	86 95       	lsr	r24
    1e56:	83 70       	andi	r24, 0x03	; 3
    1e58:	98 2f       	mov	r25, r24
    1e5a:	91 70       	andi	r25, 0x01	; 1
    1e5c:	81 e4       	ldi	r24, 0x41	; 65
    1e5e:	66 e0       	ldi	r22, 0x06	; 6
    1e60:	49 2f       	mov	r20, r25
    1e62:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
	SetPinValue(SEG_Port_h,SEG_Pin_h,GET_BIT(SevenSeg_arr[number],7));
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e3 51       	subi	r30, 0x13	; 19
    1e70:	fe 4f       	sbci	r31, 0xFE	; 254
    1e72:	80 81       	ld	r24, Z
    1e74:	98 2f       	mov	r25, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	99 27       	eor	r25, r25
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	81 e4       	ldi	r24, 0x41	; 65
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	49 2f       	mov	r20, r25
    1e82:	0e 94 67 0c 	call	0x18ce	; 0x18ce <SetPinValue>
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <GetSwitchValue>:
#include "Switch_interface.h"
#include "Switch_private.h"
#include "Switch_config.h"

u8 GetSwitchValue (void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	return GetPinValue(Switch_Port,Switch_Pin);
    1e98:	82 e4       	ldi	r24, 0x42	; 66
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
}
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <delay>:

void delay(u32 value)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	2c 97       	sbiw	r28, 0x0c	; 12
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	69 87       	std	Y+9, r22	; 0x09
    1ebc:	7a 87       	std	Y+10, r23	; 0x0a
    1ebe:	8b 87       	std	Y+11, r24	; 0x0b
    1ec0:	9c 87       	std	Y+12, r25	; 0x0c

	u32 counter=((f32)value - (0.634125f))/(0.00539875f);
    1ec2:	69 85       	ldd	r22, Y+9	; 0x09
    1ec4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	24 e0       	ldi	r18, 0x04	; 4
    1ed8:	36 e5       	ldi	r19, 0x56	; 86
    1eda:	42 e2       	ldi	r20, 0x22	; 34
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	2f ef       	ldi	r18, 0xFF	; 255
    1eec:	37 ee       	ldi	r19, 0xE7	; 231
    1eee:	40 eb       	ldi	r20, 0xB0	; 176
    1ef0:	5b e3       	ldi	r21, 0x3B	; 59
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	af 83       	std	Y+7, r26	; 0x07
    1f0c:	b8 87       	std	Y+8, r27	; 0x08
	u32 i;
	for(i=0;i<counter;i++)
    1f0e:	19 82       	std	Y+1, r1	; 0x01
    1f10:	1a 82       	std	Y+2, r1	; 0x02
    1f12:	1b 82       	std	Y+3, r1	; 0x03
    1f14:	1c 82       	std	Y+4, r1	; 0x04
    1f16:	0c c0       	rjmp	.+24     	; 0x1f30 <delay+0x8a>
	{asm("NOP");}
    1f18:	00 00       	nop
void delay(u32 value)
{

	u32 counter=((f32)value - (0.634125f))/(0.00539875f);
	u32 i;
	for(i=0;i<counter;i++)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1f20:	bc 81       	ldd	r27, Y+4	; 0x04
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	a1 1d       	adc	r26, r1
    1f26:	b1 1d       	adc	r27, r1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	ab 83       	std	Y+3, r26	; 0x03
    1f2e:	bc 83       	std	Y+4, r27	; 0x04
    1f30:	29 81       	ldd	r18, Y+1	; 0x01
    1f32:	3a 81       	ldd	r19, Y+2	; 0x02
    1f34:	4b 81       	ldd	r20, Y+3	; 0x03
    1f36:	5c 81       	ldd	r21, Y+4	; 0x04
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	af 81       	ldd	r26, Y+7	; 0x07
    1f3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1f40:	28 17       	cp	r18, r24
    1f42:	39 07       	cpc	r19, r25
    1f44:	4a 07       	cpc	r20, r26
    1f46:	5b 07       	cpc	r21, r27
    1f48:	38 f3       	brcs	.-50     	; 0x1f18 <delay+0x72>
	{asm("NOP");}

}
    1f4a:	2c 96       	adiw	r28, 0x0c	; 12
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <Task1>:
#include "SevenSeg_interface.h"

#include <util/delay.h>

void Task1(void)
{
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	c0 57       	subi	r28, 0x70	; 112
    1f6a:	d0 40       	sbci	r29, 0x00	; 0
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidInitialize();
    1f76:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	LCD_voidWriteString("MG2");
    1f7a:	80 e6       	ldi	r24, 0x60	; 96
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 59       	subi	r30, 0x93	; 147
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	aa e7       	ldi	r26, 0x7A	; 122
    1f8e:	b4 e4       	ldi	r27, 0x44	; 68
    1f90:	80 83       	st	Z, r24
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	a2 83       	std	Z+2, r26	; 0x02
    1f96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	8e 01       	movw	r16, r28
    1f9a:	07 59       	subi	r16, 0x97	; 151
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e3 59       	subi	r30, 0x93	; 147
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e7 59       	subi	r30, 0x97	; 151
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	44 f4       	brge	.+16     	; 0x1ff4 <Task1+0x98>
		__ticks = 1;
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e9 59       	subi	r30, 0x99	; 153
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	64 c0       	rjmp	.+200    	; 0x20bc <Task1+0x160>
	else if (__tmp > 65535)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 59       	subi	r30, 0x97	; 151
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <Task1+0xb8>
    2012:	43 c0       	rjmp	.+134    	; 0x209a <Task1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	fe 01       	movw	r30, r28
    2016:	e3 59       	subi	r30, 0x93	; 147
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	60 81       	ld	r22, Z
    201c:	71 81       	ldd	r23, Z+1	; 0x01
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8e 01       	movw	r16, r28
    2034:	09 59       	subi	r16, 0x99	; 153
    2036:	1f 4f       	sbci	r17, 0xFF	; 255
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	f8 01       	movw	r30, r16
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	1f c0       	rjmp	.+62     	; 0x208a <Task1+0x12e>
    204c:	fe 01       	movw	r30, r28
    204e:	eb 59       	subi	r30, 0x9B	; 155
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
    205a:	fe 01       	movw	r30, r28
    205c:	eb 59       	subi	r30, 0x9B	; 155
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <Task1+0x108>
    2068:	fe 01       	movw	r30, r28
    206a:	eb 59       	subi	r30, 0x9B	; 155
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	de 01       	movw	r26, r28
    2074:	a9 59       	subi	r26, 0x99	; 153
    2076:	bf 4f       	sbci	r27, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e9 59       	subi	r30, 0x99	; 153
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	11 96       	adiw	r26, 0x01	; 1
    2086:	9c 93       	st	X, r25
    2088:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	fe 01       	movw	r30, r28
    208c:	e9 59       	subi	r30, 0x99	; 153
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	d1 f6       	brne	.-76     	; 0x204c <Task1+0xf0>
    2098:	27 c0       	rjmp	.+78     	; 0x20e8 <Task1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	8e 01       	movw	r16, r28
    209c:	09 59       	subi	r16, 0x99	; 153
    209e:	1f 4f       	sbci	r17, 0xFF	; 255
    20a0:	fe 01       	movw	r30, r28
    20a2:	e7 59       	subi	r30, 0x97	; 151
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	f8 01       	movw	r30, r16
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	de 01       	movw	r26, r28
    20be:	ad 59       	subi	r26, 0x9D	; 157
    20c0:	bf 4f       	sbci	r27, 0xFF	; 255
    20c2:	fe 01       	movw	r30, r28
    20c4:	e9 59       	subi	r30, 0x99	; 153
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	8d 93       	st	X+, r24
    20ce:	9c 93       	st	X, r25
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 59       	subi	r30, 0x9D	; 157
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <Task1+0x17e>
    20de:	fe 01       	movw	r30, r28
    20e0:	ed 59       	subi	r30, 0x9D	; 157
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	91 83       	std	Z+1, r25	; 0x01
    20e6:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidInitialize();
    20e8:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(1, 3);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	63 e0       	ldi	r22, 0x03	; 3
    20f0:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    20f4:	80 e6       	ldi	r24, 0x60	; 96
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    20fc:	fe 01       	movw	r30, r28
    20fe:	e1 5a       	subi	r30, 0xA1	; 161
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	aa e7       	ldi	r26, 0x7A	; 122
    2108:	b4 e4       	ldi	r27, 0x44	; 68
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	05 5a       	subi	r16, 0xA5	; 165
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e1 5a       	subi	r30, 0xA1	; 161
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a ef       	ldi	r20, 0xFA	; 250
    212c:	54 e4       	ldi	r21, 0x44	; 68
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	e5 5a       	subi	r30, 0xA5	; 165
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	44 f4       	brge	.+16     	; 0x216e <Task1+0x212>
		__ticks = 1;
    215e:	fe 01       	movw	r30, r28
    2160:	e7 5a       	subi	r30, 0xA7	; 167
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	64 c0       	rjmp	.+200    	; 0x2236 <Task1+0x2da>
	else if (__tmp > 65535)
    216e:	fe 01       	movw	r30, r28
    2170:	e5 5a       	subi	r30, 0xA5	; 165
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <Task1+0x232>
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <Task1+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	fe 01       	movw	r30, r28
    2190:	e1 5a       	subi	r30, 0xA1	; 161
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8e 01       	movw	r16, r28
    21ae:	07 5a       	subi	r16, 0xA7	; 167
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	1f c0       	rjmp	.+62     	; 0x2204 <Task1+0x2a8>
    21c6:	fe 01       	movw	r30, r28
    21c8:	e9 5a       	subi	r30, 0xA9	; 169
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	fe 01       	movw	r30, r28
    21d6:	e9 5a       	subi	r30, 0xA9	; 169
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <Task1+0x282>
    21e2:	fe 01       	movw	r30, r28
    21e4:	e9 5a       	subi	r30, 0xA9	; 169
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	de 01       	movw	r26, r28
    21ee:	a7 5a       	subi	r26, 0xA7	; 167
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e7 5a       	subi	r30, 0xA7	; 167
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	fe 01       	movw	r30, r28
    2206:	e7 5a       	subi	r30, 0xA7	; 167
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	d1 f6       	brne	.-76     	; 0x21c6 <Task1+0x26a>
    2212:	27 c0       	rjmp	.+78     	; 0x2262 <Task1+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	8e 01       	movw	r16, r28
    2216:	07 5a       	subi	r16, 0xA7	; 167
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	e5 5a       	subi	r30, 0xA5	; 165
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	de 01       	movw	r26, r28
    2238:	ab 5a       	subi	r26, 0xAB	; 171
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e7 5a       	subi	r30, 0xA7	; 167
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	8d 93       	st	X+, r24
    2248:	9c 93       	st	X, r25
    224a:	fe 01       	movw	r30, r28
    224c:	eb 5a       	subi	r30, 0xAB	; 171
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <Task1+0x2f8>
    2258:	fe 01       	movw	r30, r28
    225a:	eb 5a       	subi	r30, 0xAB	; 171
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidInitialize();
    2262:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(0, 6);
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	66 e0       	ldi	r22, 0x06	; 6
    226a:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    226e:	80 e6       	ldi	r24, 0x60	; 96
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    2276:	fe 01       	movw	r30, r28
    2278:	ef 5a       	subi	r30, 0xAF	; 175
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	aa e7       	ldi	r26, 0x7A	; 122
    2282:	b4 e4       	ldi	r27, 0x44	; 68
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	8e 01       	movw	r16, r28
    228e:	03 5b       	subi	r16, 0xB3	; 179
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	ef 5a       	subi	r30, 0xAF	; 175
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	80 83       	st	Z, r24
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	a2 83       	std	Z+2, r26	; 0x02
    22b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ba:	fe 01       	movw	r30, r28
    22bc:	e3 5b       	subi	r30, 0xB3	; 179
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	44 f4       	brge	.+16     	; 0x22e8 <Task1+0x38c>
		__ticks = 1;
    22d8:	fe 01       	movw	r30, r28
    22da:	e5 5b       	subi	r30, 0xB5	; 181
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	64 c0       	rjmp	.+200    	; 0x23b0 <Task1+0x454>
	else if (__tmp > 65535)
    22e8:	fe 01       	movw	r30, r28
    22ea:	e3 5b       	subi	r30, 0xB3	; 179
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	0c f0       	brlt	.+2      	; 0x2308 <Task1+0x3ac>
    2306:	43 c0       	rjmp	.+134    	; 0x238e <Task1+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	fe 01       	movw	r30, r28
    230a:	ef 5a       	subi	r30, 0xAF	; 175
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8e 01       	movw	r16, r28
    2328:	05 5b       	subi	r16, 0xB5	; 181
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	1f c0       	rjmp	.+62     	; 0x237e <Task1+0x422>
    2340:	fe 01       	movw	r30, r28
    2342:	e7 5b       	subi	r30, 0xB7	; 183
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	88 ec       	ldi	r24, 0xC8	; 200
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	fe 01       	movw	r30, r28
    2350:	e7 5b       	subi	r30, 0xB7	; 183
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	91 81       	ldd	r25, Z+1	; 0x01
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <Task1+0x3fc>
    235c:	fe 01       	movw	r30, r28
    235e:	e7 5b       	subi	r30, 0xB7	; 183
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	91 83       	std	Z+1, r25	; 0x01
    2364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	de 01       	movw	r26, r28
    2368:	a5 5b       	subi	r26, 0xB5	; 181
    236a:	bf 4f       	sbci	r27, 0xFF	; 255
    236c:	fe 01       	movw	r30, r28
    236e:	e5 5b       	subi	r30, 0xB5	; 181
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	fe 01       	movw	r30, r28
    2380:	e5 5b       	subi	r30, 0xB5	; 181
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	d1 f6       	brne	.-76     	; 0x2340 <Task1+0x3e4>
    238c:	27 c0       	rjmp	.+78     	; 0x23dc <Task1+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238e:	8e 01       	movw	r16, r28
    2390:	05 5b       	subi	r16, 0xB5	; 181
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	e3 5b       	subi	r30, 0xB3	; 179
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	f8 01       	movw	r30, r16
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	80 83       	st	Z, r24
    23b0:	de 01       	movw	r26, r28
    23b2:	a9 5b       	subi	r26, 0xB9	; 185
    23b4:	bf 4f       	sbci	r27, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e5 5b       	subi	r30, 0xB5	; 181
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	8d 93       	st	X+, r24
    23c2:	9c 93       	st	X, r25
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5b       	subi	r30, 0xB9	; 185
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <Task1+0x472>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e9 5b       	subi	r30, 0xB9	; 185
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
	_delay_ms(1000);
	CLCD_voidInitialize();
    23dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(1, 9);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	69 e0       	ldi	r22, 0x09	; 9
    23e4:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    23e8:	80 e6       	ldi	r24, 0x60	; 96
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    23f0:	fe 01       	movw	r30, r28
    23f2:	ed 5b       	subi	r30, 0xBD	; 189
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	aa e7       	ldi	r26, 0x7A	; 122
    23fc:	b4 e4       	ldi	r27, 0x44	; 68
    23fe:	80 83       	st	Z, r24
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	a2 83       	std	Z+2, r26	; 0x02
    2404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	8e 01       	movw	r16, r28
    2408:	01 5c       	subi	r16, 0xC1	; 193
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	ed 5b       	subi	r30, 0xBD	; 189
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a ef       	ldi	r20, 0xFA	; 250
    2420:	54 e4       	ldi	r21, 0x44	; 68
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	f8 01       	movw	r30, r16
    242c:	80 83       	st	Z, r24
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	a2 83       	std	Z+2, r26	; 0x02
    2432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2434:	fe 01       	movw	r30, r28
    2436:	ff 96       	adiw	r30, 0x3f	; 63
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <Task1+0x4fe>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9e af       	std	Y+62, r25	; 0x3e
    2456:	8d af       	std	Y+61, r24	; 0x3d
    2458:	46 c0       	rjmp	.+140    	; 0x24e6 <Task1+0x58a>
	else if (__tmp > 65535)
    245a:	fe 01       	movw	r30, r28
    245c:	ff 96       	adiw	r30, 0x3f	; 63
    245e:	60 81       	ld	r22, Z
    2460:	71 81       	ldd	r23, Z+1	; 0x01
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	3f ef       	ldi	r19, 0xFF	; 255
    246a:	4f e7       	ldi	r20, 0x7F	; 127
    246c:	57 e4       	ldi	r21, 0x47	; 71
    246e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2472:	18 16       	cp	r1, r24
    2474:	64 f5       	brge	.+88     	; 0x24ce <Task1+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	fe 01       	movw	r30, r28
    2478:	ed 5b       	subi	r30, 0xBD	; 189
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9e af       	std	Y+62, r25	; 0x3e
    24a2:	8d af       	std	Y+61, r24	; 0x3d
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <Task1+0x568>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c af       	std	Y+60, r25	; 0x3c
    24ac:	8b af       	std	Y+59, r24	; 0x3b
    24ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    24b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <Task1+0x556>
    24b6:	9c af       	std	Y+60, r25	; 0x3c
    24b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    24bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	9e af       	std	Y+62, r25	; 0x3e
    24c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <Task1+0x54a>
    24cc:	16 c0       	rjmp	.+44     	; 0x24fa <Task1+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	fe 01       	movw	r30, r28
    24d0:	ff 96       	adiw	r30, 0x3f	; 63
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e af       	std	Y+62, r25	; 0x3e
    24e4:	8d af       	std	Y+61, r24	; 0x3d
    24e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ea:	9a af       	std	Y+58, r25	; 0x3a
    24ec:	89 af       	std	Y+57, r24	; 0x39
    24ee:	89 ad       	ldd	r24, Y+57	; 0x39
    24f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <Task1+0x596>
    24f6:	9a af       	std	Y+58, r25	; 0x3a
    24f8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	CLCD_voidInitialize();
    24fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(0, 12);
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	6c e0       	ldi	r22, 0x0C	; 12
    2502:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    2506:	80 e6       	ldi	r24, 0x60	; 96
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	aa e7       	ldi	r26, 0x7A	; 122
    2514:	b4 e4       	ldi	r27, 0x44	; 68
    2516:	8d ab       	std	Y+53, r24	; 0x35
    2518:	9e ab       	std	Y+54, r25	; 0x36
    251a:	af ab       	std	Y+55, r26	; 0x37
    251c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6d a9       	ldd	r22, Y+53	; 0x35
    2520:	7e a9       	ldd	r23, Y+54	; 0x36
    2522:	8f a9       	ldd	r24, Y+55	; 0x37
    2524:	98 ad       	ldd	r25, Y+56	; 0x38
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	89 ab       	std	Y+49, r24	; 0x31
    2538:	9a ab       	std	Y+50, r25	; 0x32
    253a:	ab ab       	std	Y+51, r26	; 0x33
    253c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    253e:	69 a9       	ldd	r22, Y+49	; 0x31
    2540:	7a a9       	ldd	r23, Y+50	; 0x32
    2542:	8b a9       	ldd	r24, Y+51	; 0x33
    2544:	9c a9       	ldd	r25, Y+52	; 0x34
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <Task1+0x604>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	98 ab       	std	Y+48, r25	; 0x30
    255c:	8f a7       	std	Y+47, r24	; 0x2f
    255e:	3f c0       	rjmp	.+126    	; 0x25de <Task1+0x682>
	else if (__tmp > 65535)
    2560:	69 a9       	ldd	r22, Y+49	; 0x31
    2562:	7a a9       	ldd	r23, Y+50	; 0x32
    2564:	8b a9       	ldd	r24, Y+51	; 0x33
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <Task1+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6d a9       	ldd	r22, Y+53	; 0x35
    257a:	7e a9       	ldd	r23, Y+54	; 0x36
    257c:	8f a9       	ldd	r24, Y+55	; 0x37
    257e:	98 ad       	ldd	r25, Y+56	; 0x38
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	98 ab       	std	Y+48, r25	; 0x30
    259e:	8f a7       	std	Y+47, r24	; 0x2f
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <Task1+0x664>
    25a2:	88 ec       	ldi	r24, 0xC8	; 200
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9e a7       	std	Y+46, r25	; 0x2e
    25a8:	8d a7       	std	Y+45, r24	; 0x2d
    25aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <Task1+0x652>
    25b2:	9e a7       	std	Y+46, r25	; 0x2e
    25b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	98 ab       	std	Y+48, r25	; 0x30
    25be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c2:	98 a9       	ldd	r25, Y+48	; 0x30
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <Task1+0x646>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <Task1+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	69 a9       	ldd	r22, Y+49	; 0x31
    25cc:	7a a9       	ldd	r23, Y+50	; 0x32
    25ce:	8b a9       	ldd	r24, Y+51	; 0x33
    25d0:	9c a9       	ldd	r25, Y+52	; 0x34
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	98 ab       	std	Y+48, r25	; 0x30
    25dc:	8f a7       	std	Y+47, r24	; 0x2f
    25de:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e0:	98 a9       	ldd	r25, Y+48	; 0x30
    25e2:	9c a7       	std	Y+44, r25	; 0x2c
    25e4:	8b a7       	std	Y+43, r24	; 0x2b
    25e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <Task1+0x68e>
    25ee:	9c a7       	std	Y+44, r25	; 0x2c
    25f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	CLCD_voidInitialize();
    25f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(1, 9);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	69 e0       	ldi	r22, 0x09	; 9
    25fa:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    25fe:	80 e6       	ldi	r24, 0x60	; 96
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	aa e7       	ldi	r26, 0x7A	; 122
    260c:	b4 e4       	ldi	r27, 0x44	; 68
    260e:	8f a3       	std	Y+39, r24	; 0x27
    2610:	98 a7       	std	Y+40, r25	; 0x28
    2612:	a9 a7       	std	Y+41, r26	; 0x29
    2614:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	6f a1       	ldd	r22, Y+39	; 0x27
    2618:	78 a5       	ldd	r23, Y+40	; 0x28
    261a:	89 a5       	ldd	r24, Y+41	; 0x29
    261c:	9a a5       	ldd	r25, Y+42	; 0x2a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8b a3       	std	Y+35, r24	; 0x23
    2630:	9c a3       	std	Y+36, r25	; 0x24
    2632:	ad a3       	std	Y+37, r26	; 0x25
    2634:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2636:	6b a1       	ldd	r22, Y+35	; 0x23
    2638:	7c a1       	ldd	r23, Y+36	; 0x24
    263a:	8d a1       	ldd	r24, Y+37	; 0x25
    263c:	9e a1       	ldd	r25, Y+38	; 0x26
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <Task1+0x6fc>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9a a3       	std	Y+34, r25	; 0x22
    2654:	89 a3       	std	Y+33, r24	; 0x21
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <Task1+0x77a>
	else if (__tmp > 65535)
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <Task1+0x766>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	6f a1       	ldd	r22, Y+39	; 0x27
    2672:	78 a5       	ldd	r23, Y+40	; 0x28
    2674:	89 a5       	ldd	r24, Y+41	; 0x29
    2676:	9a a5       	ldd	r25, Y+42	; 0x2a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <Task1+0x75c>
    269a:	88 ec       	ldi	r24, 0xC8	; 200
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	98 a3       	std	Y+32, r25	; 0x20
    26a0:	8f 8f       	std	Y+31, r24	; 0x1f
    26a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a4:	98 a1       	ldd	r25, Y+32	; 0x20
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <Task1+0x74a>
    26aa:	98 a3       	std	Y+32, r25	; 0x20
    26ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	89 a1       	ldd	r24, Y+33	; 0x21
    26b0:	9a a1       	ldd	r25, Y+34	; 0x22
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9a a3       	std	Y+34, r25	; 0x22
    26b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ba:	9a a1       	ldd	r25, Y+34	; 0x22
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <Task1+0x73e>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <Task1+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6b a1       	ldd	r22, Y+35	; 0x23
    26c4:	7c a1       	ldd	r23, Y+36	; 0x24
    26c6:	8d a1       	ldd	r24, Y+37	; 0x25
    26c8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9a a3       	std	Y+34, r25	; 0x22
    26d4:	89 a3       	std	Y+33, r24	; 0x21
    26d6:	89 a1       	ldd	r24, Y+33	; 0x21
    26d8:	9a a1       	ldd	r25, Y+34	; 0x22
    26da:	9e 8f       	std	Y+30, r25	; 0x1e
    26dc:	8d 8f       	std	Y+29, r24	; 0x1d
    26de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <Task1+0x786>
    26e6:	9e 8f       	std	Y+30, r25	; 0x1e
    26e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	CLCD_voidInitialize();
    26ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(0, 6);
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	66 e0       	ldi	r22, 0x06	; 6
    26f2:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    26f6:	80 e6       	ldi	r24, 0x60	; 96
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	aa e7       	ldi	r26, 0x7A	; 122
    2704:	b4 e4       	ldi	r27, 0x44	; 68
    2706:	89 8f       	std	Y+25, r24	; 0x19
    2708:	9a 8f       	std	Y+26, r25	; 0x1a
    270a:	ab 8f       	std	Y+27, r26	; 0x1b
    270c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270e:	69 8d       	ldd	r22, Y+25	; 0x19
    2710:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2712:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2714:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a ef       	ldi	r20, 0xFA	; 250
    271c:	54 e4       	ldi	r21, 0x44	; 68
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8d 8b       	std	Y+21, r24	; 0x15
    2728:	9e 8b       	std	Y+22, r25	; 0x16
    272a:	af 8b       	std	Y+23, r26	; 0x17
    272c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    272e:	6d 89       	ldd	r22, Y+21	; 0x15
    2730:	7e 89       	ldd	r23, Y+22	; 0x16
    2732:	8f 89       	ldd	r24, Y+23	; 0x17
    2734:	98 8d       	ldd	r25, Y+24	; 0x18
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <Task1+0x7f4>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 8b       	std	Y+20, r25	; 0x14
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <Task1+0x872>
	else if (__tmp > 65535)
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	4c f5       	brge	.+82     	; 0x27ba <Task1+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	69 8d       	ldd	r22, Y+25	; 0x19
    276a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    276c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    276e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
    2790:	0f c0       	rjmp	.+30     	; 0x27b0 <Task1+0x854>
    2792:	88 ec       	ldi	r24, 0xC8	; 200
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a 8b       	std	Y+18, r25	; 0x12
    2798:	89 8b       	std	Y+17, r24	; 0x11
    279a:	89 89       	ldd	r24, Y+17	; 0x11
    279c:	9a 89       	ldd	r25, Y+18	; 0x12
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <Task1+0x842>
    27a2:	9a 8b       	std	Y+18, r25	; 0x12
    27a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9c 8b       	std	Y+20, r25	; 0x14
    27ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	8b 89       	ldd	r24, Y+19	; 0x13
    27b2:	9c 89       	ldd	r25, Y+20	; 0x14
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	69 f7       	brne	.-38     	; 0x2792 <Task1+0x836>
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <Task1+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	6d 89       	ldd	r22, Y+21	; 0x15
    27bc:	7e 89       	ldd	r23, Y+22	; 0x16
    27be:	8f 89       	ldd	r24, Y+23	; 0x17
    27c0:	98 8d       	ldd	r25, Y+24	; 0x18
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9c 8b       	std	Y+20, r25	; 0x14
    27cc:	8b 8b       	std	Y+19, r24	; 0x13
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	98 8b       	std	Y+16, r25	; 0x10
    27d4:	8f 87       	std	Y+15, r24	; 0x0f
    27d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d8:	98 89       	ldd	r25, Y+16	; 0x10
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <Task1+0x87e>
    27de:	98 8b       	std	Y+16, r25	; 0x10
    27e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLCD_voidInitialize();
    27e2:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(1, 3);
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	63 e0       	ldi	r22, 0x03	; 3
    27ea:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    27ee:	80 e6       	ldi	r24, 0x60	; 96
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	aa e7       	ldi	r26, 0x7A	; 122
    27fc:	b4 e4       	ldi	r27, 0x44	; 68
    27fe:	8b 87       	std	Y+11, r24	; 0x0b
    2800:	9c 87       	std	Y+12, r25	; 0x0c
    2802:	ad 87       	std	Y+13, r26	; 0x0d
    2804:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2806:	6b 85       	ldd	r22, Y+11	; 0x0b
    2808:	7c 85       	ldd	r23, Y+12	; 0x0c
    280a:	8d 85       	ldd	r24, Y+13	; 0x0d
    280c:	9e 85       	ldd	r25, Y+14	; 0x0e
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a ef       	ldi	r20, 0xFA	; 250
    2814:	54 e4       	ldi	r21, 0x44	; 68
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8f 83       	std	Y+7, r24	; 0x07
    2820:	98 87       	std	Y+8, r25	; 0x08
    2822:	a9 87       	std	Y+9, r26	; 0x09
    2824:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	2c f4       	brge	.+10     	; 0x2848 <Task1+0x8ec>
		__ticks = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9e 83       	std	Y+6, r25	; 0x06
    2844:	8d 83       	std	Y+5, r24	; 0x05
    2846:	3f c0       	rjmp	.+126    	; 0x28c6 <Task1+0x96a>
	else if (__tmp > 65535)
    2848:	6f 81       	ldd	r22, Y+7	; 0x07
    284a:	78 85       	ldd	r23, Y+8	; 0x08
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	3f ef       	ldi	r19, 0xFF	; 255
    2854:	4f e7       	ldi	r20, 0x7F	; 127
    2856:	57 e4       	ldi	r21, 0x47	; 71
    2858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285c:	18 16       	cp	r1, r24
    285e:	4c f5       	brge	.+82     	; 0x28b2 <Task1+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	51 e4       	ldi	r21, 0x41	; 65
    2870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	9e 83       	std	Y+6, r25	; 0x06
    2886:	8d 83       	std	Y+5, r24	; 0x05
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <Task1+0x94c>
    288a:	88 ec       	ldi	r24, 0xC8	; 200
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	8b 83       	std	Y+3, r24	; 0x03
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <Task1+0x93a>
    289a:	9c 83       	std	Y+4, r25	; 0x04
    289c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	69 f7       	brne	.-38     	; 0x288a <Task1+0x92e>
    28b0:	14 c0       	rjmp	.+40     	; 0x28da <Task1+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	9a 83       	std	Y+2, r25	; 0x02
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <Task1+0x976>
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    28da:	c0 59       	subi	r28, 0x90	; 144
    28dc:	df 4f       	sbci	r29, 0xFF	; 255
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	08 95       	ret

000028f2 <check>:
u8 Password[4]={0,0,0,0};
u8 i=0,j=0;
u8 trails = 3;

void check(void)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	6c 97       	sbiw	r28, 0x1c	; 28
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
	j++;
    2906:	80 91 0e 02 	lds	r24, 0x020E
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	80 93 0e 02 	sts	0x020E, r24
	if(j>3)
    2910:	80 91 0e 02 	lds	r24, 0x020E
    2914:	84 30       	cpi	r24, 0x04	; 4
    2916:	08 f4       	brcc	.+2      	; 0x291a <check+0x28>
    2918:	3b c1       	rjmp	.+630    	; 0x2b90 <check+0x29e>
	{
		i=0;
    291a:	10 92 0d 02 	sts	0x020D, r1
		j=0;
    291e:	10 92 0e 02 	sts	0x020E, r1
		if(Password[0] == ID[3] && Password[1] == ID[2] && Password[2] == ID[1] && Password[3] == ID[0])
    2922:	90 91 09 02 	lds	r25, 0x0209
    2926:	80 91 08 02 	lds	r24, 0x0208
    292a:	98 17       	cp	r25, r24
    292c:	c9 f4       	brne	.+50     	; 0x2960 <check+0x6e>
    292e:	90 91 0a 02 	lds	r25, 0x020A
    2932:	80 91 07 02 	lds	r24, 0x0207
    2936:	98 17       	cp	r25, r24
    2938:	99 f4       	brne	.+38     	; 0x2960 <check+0x6e>
    293a:	90 91 0b 02 	lds	r25, 0x020B
    293e:	80 91 06 02 	lds	r24, 0x0206
    2942:	98 17       	cp	r25, r24
    2944:	69 f4       	brne	.+26     	; 0x2960 <check+0x6e>
    2946:	90 91 0c 02 	lds	r25, 0x020C
    294a:	80 91 05 02 	lds	r24, 0x0205
    294e:	98 17       	cp	r25, r24
    2950:	39 f4       	brne	.+14     	; 0x2960 <check+0x6e>
		{CLCD_voidInitialize();LCD_voidWriteString("Login Successful");while(1){;}}
    2952:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
    2956:	84 e6       	ldi	r24, 0x64	; 100
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    295e:	ff cf       	rjmp	.-2      	; 0x295e <check+0x6c>
		else
		{
			CLCD_voidInitialize();
    2960:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
			LCD_voidWriteString("Wrong password");
    2964:	85 e7       	ldi	r24, 0x75	; 117
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
			Password[0] = 0;
    296c:	10 92 09 02 	sts	0x0209, r1
			Password[1] = 0 ;
    2970:	10 92 0a 02 	sts	0x020A, r1
			Password[2] = 0 ;
    2974:	10 92 0b 02 	sts	0x020B, r1
			Password[3] = 0;
    2978:	10 92 0c 02 	sts	0x020C, r1
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e4       	ldi	r25, 0x40	; 64
    2980:	ac e1       	ldi	r26, 0x1C	; 28
    2982:	b6 e4       	ldi	r27, 0x46	; 70
    2984:	89 8f       	std	Y+25, r24	; 0x19
    2986:	9a 8f       	std	Y+26, r25	; 0x1a
    2988:	ab 8f       	std	Y+27, r26	; 0x1b
    298a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	69 8d       	ldd	r22, Y+25	; 0x19
    298e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a ef       	ldi	r20, 0xFA	; 250
    299a:	54 e4       	ldi	r21, 0x44	; 68
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	8d 8b       	std	Y+21, r24	; 0x15
    29a6:	9e 8b       	std	Y+22, r25	; 0x16
    29a8:	af 8b       	std	Y+23, r26	; 0x17
    29aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ac:	6d 89       	ldd	r22, Y+21	; 0x15
    29ae:	7e 89       	ldd	r23, Y+22	; 0x16
    29b0:	8f 89       	ldd	r24, Y+23	; 0x17
    29b2:	98 8d       	ldd	r25, Y+24	; 0x18
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <check+0xdc>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9c 8b       	std	Y+20, r25	; 0x14
    29ca:	8b 8b       	std	Y+19, r24	; 0x13
    29cc:	3f c0       	rjmp	.+126    	; 0x2a4c <check+0x15a>
	else if (__tmp > 65535)
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	4c f5       	brge	.+82     	; 0x2a38 <check+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	69 8d       	ldd	r22, Y+25	; 0x19
    29e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <check+0x13c>
    2a10:	88 ec       	ldi	r24, 0xC8	; 200
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9a 8b       	std	Y+18, r25	; 0x12
    2a16:	89 8b       	std	Y+17, r24	; 0x11
    2a18:	89 89       	ldd	r24, Y+17	; 0x11
    2a1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <check+0x12a>
    2a20:	9a 8b       	std	Y+18, r25	; 0x12
    2a22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	8b 89       	ldd	r24, Y+19	; 0x13
    2a26:	9c 89       	ldd	r25, Y+20	; 0x14
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	9c 8b       	std	Y+20, r25	; 0x14
    2a2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a30:	9c 89       	ldd	r25, Y+20	; 0x14
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <check+0x11e>
    2a36:	14 c0       	rjmp	.+40     	; 0x2a60 <check+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a38:	6d 89       	ldd	r22, Y+21	; 0x15
    2a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9c 8b       	std	Y+20, r25	; 0x14
    2a4a:	8b 8b       	std	Y+19, r24	; 0x13
    2a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a50:	98 8b       	std	Y+16, r25	; 0x10
    2a52:	8f 87       	std	Y+15, r24	; 0x0f
    2a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a56:	98 89       	ldd	r25, Y+16	; 0x10
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <check+0x166>
    2a5c:	98 8b       	std	Y+16, r25	; 0x10
    2a5e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10000);
			CLCD_voidInitialize();
    2a60:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
			trails--;
    2a64:	80 91 02 02 	lds	r24, 0x0202
    2a68:	81 50       	subi	r24, 0x01	; 1
    2a6a:	80 93 02 02 	sts	0x0202, r24
			if (trails == 0)
    2a6e:	80 91 02 02 	lds	r24, 0x0202
    2a72:	88 23       	and	r24, r24
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <check+0x186>
    2a76:	82 c0       	rjmp	.+260    	; 0x2b7c <check+0x28a>
			{
				LCD_voidWriteString("Failed 3 times");
    2a78:	84 e8       	ldi	r24, 0x84	; 132
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
				CLCD_voidCursorPosition(1, 0);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
				LCD_voidWriteString("Shutting down....");
    2a88:	83 e9       	ldi	r24, 0x93	; 147
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e4       	ldi	r25, 0x40	; 64
    2a94:	ac e1       	ldi	r26, 0x1C	; 28
    2a96:	b6 e4       	ldi	r27, 0x46	; 70
    2a98:	8b 87       	std	Y+11, r24	; 0x0b
    2a9a:	9c 87       	std	Y+12, r25	; 0x0c
    2a9c:	ad 87       	std	Y+13, r26	; 0x0d
    2a9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	4a ef       	ldi	r20, 0xFA	; 250
    2aae:	54 e4       	ldi	r21, 0x44	; 68
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	8f 83       	std	Y+7, r24	; 0x07
    2aba:	98 87       	std	Y+8, r25	; 0x08
    2abc:	a9 87       	std	Y+9, r26	; 0x09
    2abe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac2:	78 85       	ldd	r23, Y+8	; 0x08
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e8       	ldi	r20, 0x80	; 128
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad4:	88 23       	and	r24, r24
    2ad6:	2c f4       	brge	.+10     	; 0x2ae2 <check+0x1f0>
		__ticks = 1;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9e 83       	std	Y+6, r25	; 0x06
    2ade:	8d 83       	std	Y+5, r24	; 0x05
    2ae0:	3f c0       	rjmp	.+126    	; 0x2b60 <check+0x26e>
	else if (__tmp > 65535)
    2ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae4:	78 85       	ldd	r23, Y+8	; 0x08
    2ae6:	89 85       	ldd	r24, Y+9	; 0x09
    2ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	4c f5       	brge	.+82     	; 0x2b4c <check+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <check+0x250>
    2b24:	88 ec       	ldi	r24, 0xC8	; 200
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	8b 83       	std	Y+3, r24	; 0x03
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <check+0x23e>
    2b34:	9c 83       	std	Y+4, r25	; 0x04
    2b36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
    2b44:	9e 81       	ldd	r25, Y+6	; 0x06
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	69 f7       	brne	.-38     	; 0x2b24 <check+0x232>
    2b4a:	14 c0       	rjmp	.+40     	; 0x2b74 <check+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	89 85       	ldd	r24, Y+9	; 0x09
    2b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <check+0x27a>
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10000);
				trails=3;
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	80 93 02 02 	sts	0x0202, r24
    2b7a:	0a c0       	rjmp	.+20     	; 0x2b90 <check+0x29e>
			}
			else
			{
				CLCD_voidInitialize();
    2b7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
				LCD_voidWriteString("Password Please: ");
    2b80:	85 ea       	ldi	r24, 0xA5	; 165
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
				CLCD_voidCursorPosition(1,0);
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
			}
		}
	}
}
    2b90:	6c 96       	adiw	r28, 0x1c	; 28
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <Task2>:
void Task2(void)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
	if(!GetPinValue('D',7))
    2baa:	84 e4       	ldi	r24, 0x44	; 68
    2bac:	67 e0       	ldi	r22, 0x07	; 7
    2bae:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2bb2:	88 23       	and	r24, r24
    2bb4:	c1 f4       	brne	.+48     	; 0x2be6 <Task2+0x44>
	{
		CLCD_voidWriteData('7');
    2bb6:	87 e3       	ldi	r24, 0x37	; 55
    2bb8:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',7)){;}
    2bbc:	84 e4       	ldi	r24, 0x44	; 68
    2bbe:	67 e0       	ldi	r22, 0x07	; 7
    2bc0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2bc4:	88 23       	and	r24, r24
    2bc6:	d1 f3       	breq	.-12     	; 0x2bbc <Task2+0x1a>
		ID[i]=7;
    2bc8:	80 91 0d 02 	lds	r24, 0x020D
    2bcc:	88 2f       	mov	r24, r24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	eb 5f       	subi	r30, 0xFB	; 251
    2bd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd6:	87 e0       	ldi	r24, 0x07	; 7
    2bd8:	80 83       	st	Z, r24
		i++;
    2bda:	80 91 0d 02 	lds	r24, 0x020D
    2bde:	8f 5f       	subi	r24, 0xFF	; 255
    2be0:	80 93 0d 02 	sts	0x020D, r24
    2be4:	77 c0       	rjmp	.+238    	; 0x2cd4 <Task2+0x132>
	}
	else if(!GetPinValue('D',6))
    2be6:	84 e4       	ldi	r24, 0x44	; 68
    2be8:	66 e0       	ldi	r22, 0x06	; 6
    2bea:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2bee:	88 23       	and	r24, r24
    2bf0:	c1 f4       	brne	.+48     	; 0x2c22 <Task2+0x80>
	{
		CLCD_voidWriteData('6');
    2bf2:	86 e3       	ldi	r24, 0x36	; 54
    2bf4:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',6)){;}
    2bf8:	84 e4       	ldi	r24, 0x44	; 68
    2bfa:	66 e0       	ldi	r22, 0x06	; 6
    2bfc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2c00:	88 23       	and	r24, r24
    2c02:	d1 f3       	breq	.-12     	; 0x2bf8 <Task2+0x56>
		ID[i]=6;
    2c04:	80 91 0d 02 	lds	r24, 0x020D
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	eb 5f       	subi	r30, 0xFB	; 251
    2c10:	fd 4f       	sbci	r31, 0xFD	; 253
    2c12:	86 e0       	ldi	r24, 0x06	; 6
    2c14:	80 83       	st	Z, r24
		i++;
    2c16:	80 91 0d 02 	lds	r24, 0x020D
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	80 93 0d 02 	sts	0x020D, r24
    2c20:	59 c0       	rjmp	.+178    	; 0x2cd4 <Task2+0x132>
	}
	else if(!GetPinValue('D',5))
    2c22:	84 e4       	ldi	r24, 0x44	; 68
    2c24:	65 e0       	ldi	r22, 0x05	; 5
    2c26:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2c2a:	88 23       	and	r24, r24
    2c2c:	c1 f4       	brne	.+48     	; 0x2c5e <Task2+0xbc>
	{
		CLCD_voidWriteData('5');
    2c2e:	85 e3       	ldi	r24, 0x35	; 53
    2c30:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',5)){;}
    2c34:	84 e4       	ldi	r24, 0x44	; 68
    2c36:	65 e0       	ldi	r22, 0x05	; 5
    2c38:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2c3c:	88 23       	and	r24, r24
    2c3e:	d1 f3       	breq	.-12     	; 0x2c34 <Task2+0x92>
		ID[i]=5;
    2c40:	80 91 0d 02 	lds	r24, 0x020D
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	fc 01       	movw	r30, r24
    2c4a:	eb 5f       	subi	r30, 0xFB	; 251
    2c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c4e:	85 e0       	ldi	r24, 0x05	; 5
    2c50:	80 83       	st	Z, r24
		i++;
    2c52:	80 91 0d 02 	lds	r24, 0x020D
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	80 93 0d 02 	sts	0x020D, r24
    2c5c:	3b c0       	rjmp	.+118    	; 0x2cd4 <Task2+0x132>
	}
	else if(!GetPinValue('D',4))
    2c5e:	84 e4       	ldi	r24, 0x44	; 68
    2c60:	64 e0       	ldi	r22, 0x04	; 4
    2c62:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2c66:	88 23       	and	r24, r24
    2c68:	c1 f4       	brne	.+48     	; 0x2c9a <Task2+0xf8>
	{
		CLCD_voidWriteData('4');
    2c6a:	84 e3       	ldi	r24, 0x34	; 52
    2c6c:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',4)){;}
    2c70:	84 e4       	ldi	r24, 0x44	; 68
    2c72:	64 e0       	ldi	r22, 0x04	; 4
    2c74:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2c78:	88 23       	and	r24, r24
    2c7a:	d1 f3       	breq	.-12     	; 0x2c70 <Task2+0xce>
		ID[i]=4;
    2c7c:	80 91 0d 02 	lds	r24, 0x020D
    2c80:	88 2f       	mov	r24, r24
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	fc 01       	movw	r30, r24
    2c86:	eb 5f       	subi	r30, 0xFB	; 251
    2c88:	fd 4f       	sbci	r31, 0xFD	; 253
    2c8a:	84 e0       	ldi	r24, 0x04	; 4
    2c8c:	80 83       	st	Z, r24
		i++;
    2c8e:	80 91 0d 02 	lds	r24, 0x020D
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	80 93 0d 02 	sts	0x020D, r24
    2c98:	1d c0       	rjmp	.+58     	; 0x2cd4 <Task2+0x132>
	}
	else if(!GetPinValue('D',3))
    2c9a:	84 e4       	ldi	r24, 0x44	; 68
    2c9c:	63 e0       	ldi	r22, 0x03	; 3
    2c9e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2ca2:	88 23       	and	r24, r24
    2ca4:	b9 f4       	brne	.+46     	; 0x2cd4 <Task2+0x132>
	{
		CLCD_voidWriteData('3');
    2ca6:	83 e3       	ldi	r24, 0x33	; 51
    2ca8:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',3)){;}
    2cac:	84 e4       	ldi	r24, 0x44	; 68
    2cae:	63 e0       	ldi	r22, 0x03	; 3
    2cb0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2cb4:	88 23       	and	r24, r24
    2cb6:	d1 f3       	breq	.-12     	; 0x2cac <Task2+0x10a>
		ID[i]=3;
    2cb8:	80 91 0d 02 	lds	r24, 0x020D
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	eb 5f       	subi	r30, 0xFB	; 251
    2cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc6:	83 e0       	ldi	r24, 0x03	; 3
    2cc8:	80 83       	st	Z, r24
		i++;
    2cca:	80 91 0d 02 	lds	r24, 0x020D
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	80 93 0d 02 	sts	0x020D, r24
	}

}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <Task2_>:

void Task2_(void)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	if(!GetPinValue('D',7))
    2ce2:	84 e4       	ldi	r24, 0x44	; 68
    2ce4:	67 e0       	ldi	r22, 0x07	; 7
    2ce6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2cea:	88 23       	and	r24, r24
    2cec:	a9 f4       	brne	.+42     	; 0x2d18 <Task2_+0x3e>
	{
		CLCD_voidWriteData('*');
    2cee:	8a e2       	ldi	r24, 0x2A	; 42
    2cf0:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',7)){;}
    2cf4:	84 e4       	ldi	r24, 0x44	; 68
    2cf6:	67 e0       	ldi	r22, 0x07	; 7
    2cf8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2cfc:	88 23       	and	r24, r24
    2cfe:	d1 f3       	breq	.-12     	; 0x2cf4 <Task2_+0x1a>
		Password[j]=7;
    2d00:	80 91 0e 02 	lds	r24, 0x020E
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e7 5f       	subi	r30, 0xF7	; 247
    2d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	80 83       	st	Z, r24
		check();
    2d12:	0e 94 79 14 	call	0x28f2	; 0x28f2 <check>
    2d16:	6b c0       	rjmp	.+214    	; 0x2dee <Task2_+0x114>
	}
	else if(!GetPinValue('D',6))
    2d18:	84 e4       	ldi	r24, 0x44	; 68
    2d1a:	66 e0       	ldi	r22, 0x06	; 6
    2d1c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d20:	88 23       	and	r24, r24
    2d22:	a9 f4       	brne	.+42     	; 0x2d4e <Task2_+0x74>
	{
		CLCD_voidWriteData('*');
    2d24:	8a e2       	ldi	r24, 0x2A	; 42
    2d26:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',6)){;}
    2d2a:	84 e4       	ldi	r24, 0x44	; 68
    2d2c:	66 e0       	ldi	r22, 0x06	; 6
    2d2e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d32:	88 23       	and	r24, r24
    2d34:	d1 f3       	breq	.-12     	; 0x2d2a <Task2_+0x50>
		Password[j]=6;
    2d36:	80 91 0e 02 	lds	r24, 0x020E
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	fc 01       	movw	r30, r24
    2d40:	e7 5f       	subi	r30, 0xF7	; 247
    2d42:	fd 4f       	sbci	r31, 0xFD	; 253
    2d44:	86 e0       	ldi	r24, 0x06	; 6
    2d46:	80 83       	st	Z, r24
		check();
    2d48:	0e 94 79 14 	call	0x28f2	; 0x28f2 <check>
    2d4c:	50 c0       	rjmp	.+160    	; 0x2dee <Task2_+0x114>
	}
	else if(!GetPinValue('D',5))
    2d4e:	84 e4       	ldi	r24, 0x44	; 68
    2d50:	65 e0       	ldi	r22, 0x05	; 5
    2d52:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d56:	88 23       	and	r24, r24
    2d58:	a9 f4       	brne	.+42     	; 0x2d84 <Task2_+0xaa>
	{
		CLCD_voidWriteData('*');
    2d5a:	8a e2       	ldi	r24, 0x2A	; 42
    2d5c:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',5)){;}
    2d60:	84 e4       	ldi	r24, 0x44	; 68
    2d62:	65 e0       	ldi	r22, 0x05	; 5
    2d64:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d68:	88 23       	and	r24, r24
    2d6a:	d1 f3       	breq	.-12     	; 0x2d60 <Task2_+0x86>
		Password[j]=5;
    2d6c:	80 91 0e 02 	lds	r24, 0x020E
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	fc 01       	movw	r30, r24
    2d76:	e7 5f       	subi	r30, 0xF7	; 247
    2d78:	fd 4f       	sbci	r31, 0xFD	; 253
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	80 83       	st	Z, r24
		check();
    2d7e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <check>
    2d82:	35 c0       	rjmp	.+106    	; 0x2dee <Task2_+0x114>
	}
	else if(!GetPinValue('D',4))
    2d84:	84 e4       	ldi	r24, 0x44	; 68
    2d86:	64 e0       	ldi	r22, 0x04	; 4
    2d88:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d8c:	88 23       	and	r24, r24
    2d8e:	a9 f4       	brne	.+42     	; 0x2dba <Task2_+0xe0>
	{
		CLCD_voidWriteData('*');
    2d90:	8a e2       	ldi	r24, 0x2A	; 42
    2d92:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',4)){;}
    2d96:	84 e4       	ldi	r24, 0x44	; 68
    2d98:	64 e0       	ldi	r22, 0x04	; 4
    2d9a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2d9e:	88 23       	and	r24, r24
    2da0:	d1 f3       	breq	.-12     	; 0x2d96 <Task2_+0xbc>
		Password[j]=4;
    2da2:	80 91 0e 02 	lds	r24, 0x020E
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	fc 01       	movw	r30, r24
    2dac:	e7 5f       	subi	r30, 0xF7	; 247
    2dae:	fd 4f       	sbci	r31, 0xFD	; 253
    2db0:	84 e0       	ldi	r24, 0x04	; 4
    2db2:	80 83       	st	Z, r24
		check();
    2db4:	0e 94 79 14 	call	0x28f2	; 0x28f2 <check>
    2db8:	1a c0       	rjmp	.+52     	; 0x2dee <Task2_+0x114>
	}
	else if(!GetPinValue('D',3))
    2dba:	84 e4       	ldi	r24, 0x44	; 68
    2dbc:	63 e0       	ldi	r22, 0x03	; 3
    2dbe:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2dc2:	88 23       	and	r24, r24
    2dc4:	a1 f4       	brne	.+40     	; 0x2dee <Task2_+0x114>
	{
		CLCD_voidWriteData('*');
    2dc6:	8a e2       	ldi	r24, 0x2A	; 42
    2dc8:	0e 94 17 08 	call	0x102e	; 0x102e <CLCD_voidWriteData>
		while(!GetPinValue('D',3)){;}
    2dcc:	84 e4       	ldi	r24, 0x44	; 68
    2dce:	63 e0       	ldi	r22, 0x03	; 3
    2dd0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2dd4:	88 23       	and	r24, r24
    2dd6:	d1 f3       	breq	.-12     	; 0x2dcc <Task2_+0xf2>
		Password[j]=3;
    2dd8:	80 91 0e 02 	lds	r24, 0x020E
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	fc 01       	movw	r30, r24
    2de2:	e7 5f       	subi	r30, 0xF7	; 247
    2de4:	fd 4f       	sbci	r31, 0xFD	; 253
    2de6:	83 e0       	ldi	r24, 0x03	; 3
    2de8:	80 83       	st	Z, r24
		check();
    2dea:	0e 94 79 14 	call	0x28f2	; 0x28f2 <check>
	}
}
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <move>:

u8 posx=0,posy=0;

void move(void)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInitialize();
    2dfc:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	CLCD_voidCursorPosition(posy,posx);
    2e00:	80 91 10 02 	lds	r24, 0x0210
    2e04:	90 91 0f 02 	lds	r25, 0x020F
    2e08:	69 2f       	mov	r22, r25
    2e0a:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
	LCD_voidWriteString("MG2");
    2e0e:	80 e6       	ldi	r24, 0x60	; 96
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
}
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <Task3>:

void Task3(void)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
	if(!GetPinValue('D',7))
    2e24:	84 e4       	ldi	r24, 0x44	; 68
    2e26:	67 e0       	ldi	r22, 0x07	; 7
    2e28:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2e2c:	88 23       	and	r24, r24
    2e2e:	91 f4       	brne	.+36     	; 0x2e54 <Task3+0x38>
	{
		if(posx<13){posx++;}
    2e30:	80 91 0f 02 	lds	r24, 0x020F
    2e34:	8d 30       	cpi	r24, 0x0D	; 13
    2e36:	28 f4       	brcc	.+10     	; 0x2e42 <Task3+0x26>
    2e38:	80 91 0f 02 	lds	r24, 0x020F
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	80 93 0f 02 	sts	0x020F, r24
		move();
    2e42:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <move>
		while(!GetPinValue('D',7)){;}
    2e46:	84 e4       	ldi	r24, 0x44	; 68
    2e48:	67 e0       	ldi	r22, 0x07	; 7
    2e4a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2e4e:	88 23       	and	r24, r24
    2e50:	d1 f3       	breq	.-12     	; 0x2e46 <Task3+0x2a>
    2e52:	47 c0       	rjmp	.+142    	; 0x2ee2 <Task3+0xc6>
	}
	else if(!GetPinValue('D',6))
    2e54:	84 e4       	ldi	r24, 0x44	; 68
    2e56:	66 e0       	ldi	r22, 0x06	; 6
    2e58:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2e5c:	88 23       	and	r24, r24
    2e5e:	91 f4       	brne	.+36     	; 0x2e84 <Task3+0x68>
	{
		if(posy<1){posy++;}
    2e60:	80 91 10 02 	lds	r24, 0x0210
    2e64:	88 23       	and	r24, r24
    2e66:	29 f4       	brne	.+10     	; 0x2e72 <Task3+0x56>
    2e68:	80 91 10 02 	lds	r24, 0x0210
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	80 93 10 02 	sts	0x0210, r24
		move();
    2e72:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <move>
		while(!GetPinValue('D',6)){;}
    2e76:	84 e4       	ldi	r24, 0x44	; 68
    2e78:	66 e0       	ldi	r22, 0x06	; 6
    2e7a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2e7e:	88 23       	and	r24, r24
    2e80:	d1 f3       	breq	.-12     	; 0x2e76 <Task3+0x5a>
    2e82:	2f c0       	rjmp	.+94     	; 0x2ee2 <Task3+0xc6>
	}
	else if(!GetPinValue('D',5))
    2e84:	84 e4       	ldi	r24, 0x44	; 68
    2e86:	65 e0       	ldi	r22, 0x05	; 5
    2e88:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2e8c:	88 23       	and	r24, r24
    2e8e:	91 f4       	brne	.+36     	; 0x2eb4 <Task3+0x98>
	{
		if(posx>0){posx--;}
    2e90:	80 91 0f 02 	lds	r24, 0x020F
    2e94:	88 23       	and	r24, r24
    2e96:	29 f0       	breq	.+10     	; 0x2ea2 <Task3+0x86>
    2e98:	80 91 0f 02 	lds	r24, 0x020F
    2e9c:	81 50       	subi	r24, 0x01	; 1
    2e9e:	80 93 0f 02 	sts	0x020F, r24
		move();
    2ea2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <move>
		while(!GetPinValue('D',5)){;}
    2ea6:	84 e4       	ldi	r24, 0x44	; 68
    2ea8:	65 e0       	ldi	r22, 0x05	; 5
    2eaa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2eae:	88 23       	and	r24, r24
    2eb0:	d1 f3       	breq	.-12     	; 0x2ea6 <Task3+0x8a>
    2eb2:	17 c0       	rjmp	.+46     	; 0x2ee2 <Task3+0xc6>
	}
	else if(!GetPinValue('D',4))
    2eb4:	84 e4       	ldi	r24, 0x44	; 68
    2eb6:	64 e0       	ldi	r22, 0x04	; 4
    2eb8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2ebc:	88 23       	and	r24, r24
    2ebe:	89 f4       	brne	.+34     	; 0x2ee2 <Task3+0xc6>
	{
		if(posy>0){posy--;}
    2ec0:	80 91 10 02 	lds	r24, 0x0210
    2ec4:	88 23       	and	r24, r24
    2ec6:	29 f0       	breq	.+10     	; 0x2ed2 <Task3+0xb6>
    2ec8:	80 91 10 02 	lds	r24, 0x0210
    2ecc:	81 50       	subi	r24, 0x01	; 1
    2ece:	80 93 10 02 	sts	0x0210, r24
		move();
    2ed2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <move>
		while(!GetPinValue('D',4)){;}
    2ed6:	84 e4       	ldi	r24, 0x44	; 68
    2ed8:	64 e0       	ldi	r22, 0x04	; 4
    2eda:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <GetPinValue>
    2ede:	88 23       	and	r24, r24
    2ee0:	d1 f3       	breq	.-12     	; 0x2ed6 <Task3+0xba>
	}

}
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <main>:

void main (void)
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
	SevenSeg_Enable(0);
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	0e 94 75 0e 	call	0x1cea	; 0x1cea <SevenSeg_Enable>
	SevenSeg_SetNumber (trails,0);
    2f02:	80 91 02 02 	lds	r24, 0x0202
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <SevenSeg_SetNumber>
	PortInitialize();
    2f0c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <PortInitialize>
	CLCD_voidInitialize();
    2f10:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
	LCD_voidWriteString("Welcome");
    2f14:	87 eb       	ldi	r24, 0xB7	; 183
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e8       	ldi	r25, 0x80	; 128
    2f20:	ab e3       	ldi	r26, 0x3B	; 59
    2f22:	b5 e4       	ldi	r27, 0x45	; 69
    2f24:	8b 87       	std	Y+11, r24	; 0x0b
    2f26:	9c 87       	std	Y+12, r25	; 0x0c
    2f28:	ad 87       	std	Y+13, r26	; 0x0d
    2f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	4a ef       	ldi	r20, 0xFA	; 250
    2f3a:	54 e4       	ldi	r21, 0x44	; 68
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	8f 83       	std	Y+7, r24	; 0x07
    2f46:	98 87       	std	Y+8, r25	; 0x08
    2f48:	a9 87       	std	Y+9, r26	; 0x09
    2f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4e:	78 85       	ldd	r23, Y+8	; 0x08
    2f50:	89 85       	ldd	r24, Y+9	; 0x09
    2f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e8       	ldi	r20, 0x80	; 128
    2f5a:	5f e3       	ldi	r21, 0x3F	; 63
    2f5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f60:	88 23       	and	r24, r24
    2f62:	2c f4       	brge	.+10     	; 0x2f6e <main+0x86>
		__ticks = 1;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	3f c0       	rjmp	.+126    	; 0x2fec <main+0x104>
	else if (__tmp > 65535)
    2f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f70:	78 85       	ldd	r23, Y+8	; 0x08
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	3f ef       	ldi	r19, 0xFF	; 255
    2f7a:	4f e7       	ldi	r20, 0x7F	; 127
    2f7c:	57 e4       	ldi	r21, 0x47	; 71
    2f7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f82:	18 16       	cp	r1, r24
    2f84:	4c f5       	brge	.+82     	; 0x2fd8 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e2       	ldi	r20, 0x20	; 32
    2f94:	51 e4       	ldi	r21, 0x41	; 65
    2f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	0f c0       	rjmp	.+30     	; 0x2fce <main+0xe6>
    2fb0:	88 ec       	ldi	r24, 0xC8	; 200
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
    2fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fba:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <main+0xd4>
    2fc0:	9c 83       	std	Y+4, r25	; 0x04
    2fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fce:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	69 f7       	brne	.-38     	; 0x2fb0 <main+0xc8>
    2fd6:	14 c0       	rjmp	.+40     	; 0x3000 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fda:	78 85       	ldd	r23, Y+8	; 0x08
    2fdc:	89 85       	ldd	r24, Y+9	; 0x09
    2fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	8d 81       	ldd	r24, Y+5	; 0x05
    2fee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <main+0x110>
    2ffc:	9a 83       	std	Y+2, r25	; 0x02
    2ffe:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		_delay_ms(3000);
		CLCD_voidInitialize();
    3000:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
		LCD_voidWriteString("ID Please: ");
    3004:	8f eb       	ldi	r24, 0xBF	; 191
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <main+0x12a>
		while(i<4)
		{
			Task2();
    300e:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Task2>
	while(1)
	{
		_delay_ms(3000);
		CLCD_voidInitialize();
		LCD_voidWriteString("ID Please: ");
		while(i<4)
    3012:	80 91 0d 02 	lds	r24, 0x020D
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	d0 f3       	brcs	.-12     	; 0x300e <main+0x126>
		{
			Task2();
		}
		CLCD_voidInitialize();
    301a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidInitialize>
		LCD_voidWriteString("Password Please: ");
    301e:	85 ea       	ldi	r24, 0xA5	; 165
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCD_voidWriteString>
		CLCD_voidCursorPosition(1,0);
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	0e 94 35 0b 	call	0x166a	; 0x166a <CLCD_voidCursorPosition>
    302e:	0b c0       	rjmp	.+22     	; 0x3046 <main+0x15e>
		while(trails>0)
		{
			while(j<4)
			{
				SevenSeg_SetNumber (trails,0);
    3030:	80 91 02 02 	lds	r24, 0x0202
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <SevenSeg_SetNumber>
				Task2_();
    303a:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Task2_>
		CLCD_voidInitialize();
		LCD_voidWriteString("Password Please: ");
		CLCD_voidCursorPosition(1,0);
		while(trails>0)
		{
			while(j<4)
    303e:	80 91 0e 02 	lds	r24, 0x020E
    3042:	84 30       	cpi	r24, 0x04	; 4
    3044:	a8 f3       	brcs	.-22     	; 0x3030 <main+0x148>
			Task2();
		}
		CLCD_voidInitialize();
		LCD_voidWriteString("Password Please: ");
		CLCD_voidCursorPosition(1,0);
		while(trails>0)
    3046:	80 91 02 02 	lds	r24, 0x0202
    304a:	88 23       	and	r24, r24
    304c:	c1 f7       	brne	.-16     	; 0x303e <main+0x156>
    304e:	66 cf       	rjmp	.-308    	; 0x2f1c <main+0x34>

00003050 <__prologue_saves__>:
    3050:	2f 92       	push	r2
    3052:	3f 92       	push	r3
    3054:	4f 92       	push	r4
    3056:	5f 92       	push	r5
    3058:	6f 92       	push	r6
    305a:	7f 92       	push	r7
    305c:	8f 92       	push	r8
    305e:	9f 92       	push	r9
    3060:	af 92       	push	r10
    3062:	bf 92       	push	r11
    3064:	cf 92       	push	r12
    3066:	df 92       	push	r13
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	ca 1b       	sub	r28, r26
    307a:	db 0b       	sbc	r29, r27
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	09 94       	ijmp

00003088 <__epilogue_restores__>:
    3088:	2a 88       	ldd	r2, Y+18	; 0x12
    308a:	39 88       	ldd	r3, Y+17	; 0x11
    308c:	48 88       	ldd	r4, Y+16	; 0x10
    308e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3090:	6e 84       	ldd	r6, Y+14	; 0x0e
    3092:	7d 84       	ldd	r7, Y+13	; 0x0d
    3094:	8c 84       	ldd	r8, Y+12	; 0x0c
    3096:	9b 84       	ldd	r9, Y+11	; 0x0b
    3098:	aa 84       	ldd	r10, Y+10	; 0x0a
    309a:	b9 84       	ldd	r11, Y+9	; 0x09
    309c:	c8 84       	ldd	r12, Y+8	; 0x08
    309e:	df 80       	ldd	r13, Y+7	; 0x07
    30a0:	ee 80       	ldd	r14, Y+6	; 0x06
    30a2:	fd 80       	ldd	r15, Y+5	; 0x05
    30a4:	0c 81       	ldd	r16, Y+4	; 0x04
    30a6:	1b 81       	ldd	r17, Y+3	; 0x03
    30a8:	aa 81       	ldd	r26, Y+2	; 0x02
    30aa:	b9 81       	ldd	r27, Y+1	; 0x01
    30ac:	ce 0f       	add	r28, r30
    30ae:	d1 1d       	adc	r29, r1
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	ed 01       	movw	r28, r26
    30bc:	08 95       	ret

000030be <_exit>:
    30be:	f8 94       	cli

000030c0 <__stop_program>:
    30c0:	ff cf       	rjmp	.-2      	; 0x30c0 <__stop_program>
